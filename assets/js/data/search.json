[ { "title": "Application.isPlaying과 Application.isEditor의 차이", "url": "/posts/application_isplaying_iseditor/", "categories": "Unity", "tags": "Unity", "date": "2024-11-22 00:00:00 +0900", "snippet": "Application.isPlaying은 빌드된 게임 혹은 에디터의 플레이 모드(에디터에서 실행시키는 것)일 때 true를 반환한다.Application.isEditor는 에디터에서 실행되는지의 여부를 반환한다. Application.isPlayingApplication.isEditor그리고 Application.isEditor는 #if UNITY_EDITOR와 기능적으로 동일하며, 코드가 빌드에 포함되는지의 차이만 있다. Difference between #if UNITY_EDITOR and Application.isEditor?즉 에디터에서 Play 버튼을 눌러서 에디터 내의 플레이 모드로 실행했을 경우, Application.isPlaying과 Application.isEditor는 둘 다 true를 반환한다. 하지만 게임 실행 중이 아닐 때 동작하는 코드에 대해서는 Application.isPlaying는 false, Application.isEditor는 true를 반환한다.public class NewScriptableObjectScript : ScriptableObject{ private void Awake() { Debug.Log(&quot;Called Awake()&quot;);#if UNITY_EDITOR Debug.Log(&quot;UNITY_EDITOR&quot;); if (!Application.isPlaying) { Debug.Log(&quot;Application.isPlaying&quot;); }#endif }}public class Test : MonoBehaviour{ void Start() { ScriptableObject.CreateInstance(typeof(NewScriptableObjectScript)); }}위의 코드를 실행해보면 결과는 다음과 같다.Application.isEditor나 #if UNITY_EDITOR는 에디터에서 플레이 모드 실행시에도 조건을 만족하는 것으로 판정하므로, 실행시 동작하지 않는(예를 들어 ScriptableObject의 Awake()나 OnEnable()가 에디터에서만 동작하고 게임 실행 단계에서는 동작하지 않기를 원하는 경우 등) 코드를 지정하려면 Application.isPlaying을 사용해야 한다.사실 유니티 API사이트 보면 금방 알 수 있는 건데 모르고 있다가 최근에 알게 되서 정리했다." }, { "title": "Odin Inspector의 PropertyOrder 관련 짧은 팁", "url": "/posts/odin-inspector-propertyorder/", "categories": "Unity", "tags": "Unity, Odin", "date": "2024-11-18 00:00:00 +0900", "snippet": "Odin Inspector의 PropertyOrder를 사용하면 인스펙터에서 프로퍼티가 출력되는 순서를 지정할 수 있다. 유니티에서는 상속된 클래스의 프로퍼티가 인스펙터에서 보이는 순서를 지정할 수 없어서 불편할 때가 많은데 PropertyOrder가 이 문제를 해결해준다.이때, PropertyOrder가 설정되지 않은 일반 프로퍼티의 Order는 0으로 취급되는 것으로 보인다.public class GameBaseSO : SavableSO{ [PropertyOrder(1)] // PropertyOrder 1 public string Name; [TextArea(5, 20)] [PropertyOrder(998)] public string HelpText;}public class Area : GameBaseSO{ [TextArea(5, 20)] public string Description; public List&amp;lt;AreaTag&amp;gt; Tags; public int MaxFacility;}PropertyOrder를 1로 설정하면 Name이 Order가 없는 Description이나 MaxFacility보다 아래에 오는 것을 볼 수 있다.여기서 Name의 PropertyOrder를 -1로 바꾸면 Name이 Description위로 올라오게 된다." }, { "title": "ScriptableObject를 참조하는 객체의 JSON Serialize", "url": "/posts/json_save_scriptableobject/", "categories": "Unity", "tags": "Unity, ScriptableObject", "date": "2024-11-16 00:00:00 +0900", "snippet": "Unity의 ScriptableObject는 특정한 아이템 유형 등을 정의할 때 Enum처럼 사용할 수 있다. 이는 유니티에서 공식적으로 권장하는 사용 방식이다.위의 인벤토리 예시는 유니티에서 제공하는 협업과 코딩 측면에서 유용한 스크립터블 오브젝트 활용법 6가지라는 강좌에 있는 내용이다.여기까지는 괜찮지만, 문제는 이 인벤토리 정보를 저장하려고 할 때 발생한다. 유니티에서 가장 일반적으로 사용되든 게임 데이터 저장방법은 Json이다. 위의 예시와 유사한 코드를 만들어서 세이브를 구현해보자.using UnityEngine;public class ItemTemplete : ScriptableObject{}public class InventoryTest : MonoBehaviour{ public ItemTemplete Weapon; public ItemTemplete Armor; void Start() { Save(); } void Save() { var str = JsonUtility.ToJson(this); Debug.Log(str); }}인스펙터에서는 이렇게 설정한다.그리고 실행해 보면 json으로 변환된 출력 결과를 볼 수 있다.ScriptableObject 타입인 Armor의 값에 Instance ID가 들어있는 것을 볼 수 있다. 이 인스턴스 ID가 지정한 ItemTemplete의 참조라고 볼 수 있다. 문제는, Instance ID는 게임을 재시작하면 바뀌는 값이라는 것이다.유니티 메뉴얼에는 다음과 같이 적혀 있다. ID는 플레이어 런타임과 편집기의 세션 간에 변경됩니다. 따라서 ID는 세션 간에 걸쳐 발생할 수 있는 작업(예: 파일에서 객체 상태 로드)을 수행하는 데 신뢰할 수 없습니다.The ID changes between sessions of the player runtime and Editor. As such, the ID is not reliable for performing actions that could span between sessions, for example, loading an object state from a file. https://docs.unity3d.com/ScriptReference/Object.GetInstanceID.html 그러니까 이 방식으로 인벤토리 데이터를 저장하면 Armor값은 다음 로드할 때 날아간다는 것이다.그럼 이 문제는 어떻게 해결해야 하는가? 상식적으로 ScriptableObject는 유니티가 미는 주요 기능이니까 뭔가 해결 방법이 있을 것이다… 라고 생각했지만, 구글을 한참 뒤져도 이 문제를 해결하는 ‘유니티의 자체 기능’은 없었다. 어떤 형태로든 SO에 대한 참조를 저장하지 않고 우회하는 구조를 만들라는 이야기가 대부분. 참조를 직렬화하기 어려운 건 원래 그랬지만 SO는 고정된 에셋인데도 그렇다. SO에 고유 ID를 할당하고 매니저 클래스에서 ID로 참조, 세이브 파일에는 ID값만 넣는 식으로 충분히 구현 가능하지만, 유니티는 이런 기능을 공식적으로 지원하지 않으며, 사용자가 직접 구현해야만 한다. 이와 관련된 불편을 호소하는 사람들은 나 혼자가 아닌지, 관련글을 꽤 많이 찾을 수 있었다. Save List of Scriptable objectsSerializing References to ScriptableObjectsSerializing ScriptableObject Reference (InstanceID)Reference Type을 저장하는 건 복잡한 문제니까 그렇다 쳐도, 최소한 ScriptableObject에 대해서만이라도 지원해주는 게 맞지 않나? 아이템 같은 걸 SO로 구현하는 건 상당히 일반적인데, 인벤토리를 저장할 방법 정도는 게임에서 지원해야지… ScriptableObject이나 그 이후에 추가된 기능들을 보면 유니티가 추가하는 신기능들은 뭔가 나사가 하나씩 빠져있는 느낌이 든다." }, { "title": "UI Text, TextMeshPro, TextCore?", "url": "/posts/textmeshpro_textcore/", "categories": "Unity", "tags": "Unity, Testmeshpro", "date": "2024-11-16 00:00:00 +0900", "snippet": "최근에 유니티 6을 사용해봤는데, 생성할 수 있는 객체 중에 TextMeshpro와 TextCore라는 게 나눠져 있었다.TextMeshpro는 현 시점(유니티 6 프리뷰)에서는 별도의 패키지지만 사용할 때 자동으로 다운받는 창이 뜨는 구조였고, 기존 UI Text는 역시 남아 있지만 legacy로 분류되어 있다.이게 뭔지 몰라서 찾아본 바로는, 공식적인 답변은 아니지만 TextCore가 TextMeshpro를 기본 텍스트 기능으로 통합한 것이라고 한다. 그럼 이게 왜 TextMeshpro와 따로 존재하는가?아직 통합 작업이 끝나지 않아서라는 게 내가 찾은 답변이었다. 현 시점에는 통합이 완전하지 않아서, 유니티의 UI Element에서는 TextCore를 쓰고 UGUI에서는 TextMeshPro를 쓰는 것 같다. 그런 주제에 둘 다 메뉴에는 들어가 있어서 사람을 헷갈리게 만든다.그래서 뭘 써야 아는지 모르겠지만 일단 UI Element가 아닌 게임 내 오브젝트에서는 TextCore를 무시하고 TextMeshPro만 쓰기로 했고, 그걸로 별 문제 없이 돌아가고 있다.유니티의 preview 버전은 beta가 아닌데 이런 식으로 개발중인 기능을 헷갈리게 넣어놓은 건, 최근 유니티가 유저 편의성보다 개발진이 넣고 싶은 기능 추가에만 열을 올린다는 비판이 왜 나오는지 조금 알 것 같은 기분이다." }, { "title": "Spine에서 실시간으로 material 변경하기", "url": "/posts/spine2d_override_material/", "categories": "Unity", "tags": "Unity, Spine", "date": "2024-10-03 00:00:00 +0900", "snippet": "유니티 게임개발 시 많이 사용되는 Spine을 쓰던 도중, 스파인 애니메이션 중에 실시간으로 메테리얼을 교체해야 하는 이슈가 있었다.맨 처음에는 평범하게 유니티 Mesh Renderer에서 직접 material을 변경해봤다.obj.GetComponent&amp;lt;MeshRenderer&amp;gt;().material = newMaterial; // 단일 메테리얼일 때obj.GetComponent&amp;lt;Renderer&amp;gt;().materials = new Material[2] {newMaterial, newMaterial}; // 여러 개의 메테리얼을 교체할 때 유니티(Unity) Materials 일부 변경하기하지만 실제 게임에서는 효과가 없었다.아마도 Spine이 애니메이션을 제어하면서 메테리얼도 자체적으로 제어하고 있기 때문이 아닐까 싶어서 따로 검색해 봤다.역시나 스파인 문제였고, 스파인 라이브러리에는 객체의 메테리얼을 변경(덮어쓰기)할 수 있는 기능이 따로 있었다. Set Skeleton Saturation at runtime spine-unity Runtime Documentation적용하는 법은 다음과 같다. var skeleton = o.GetComponent&amp;lt;SkeletonAnimation&amp;gt;(); var mat = skeleton.SkeletonDataAsset.atlasAssets[0].PrimaryMaterial; skeleton.CustomMaterialOverride.Add(mat, newMaterial);스파인 쪽에 기능이 있을 거라는 생각을 못 하면 한참 헤맬 수 있는 문제였는데, 다행이 직감판정(?)에 성공해서 빠르게 해법을 찾을 수 있었다." }, { "title": "C#에서 equals와 ==의 차이", "url": "/posts/equal_override/", "categories": "C&#35;", "tags": "C&#35;", "date": "2023-10-02 00:00:00 +0900", "snippet": "C#에서 특정한 개체가 동일한지를 체크하는 방법은 object.equals()를 사용하는 것과 ==연산자를 사용하는 것 두 가지가 있다.그리고 이 둘은 따로 오버라이딩이 가능하다.이 둘은 얼핏 보면 같은 기능처럼 보이지만, 사실 다른 기능이다. C# 에서의 문자열 비교, == or Equals? C# difference between == and Equals()요약하자면 object.equals()는 값을 비교하고, ==연산자는 동일 객체의 참조인지를 확인하는 System.Object.ReferenceEquals()함수를 호출한다.보통 관성적으로 ==를 이용해 값을 비교하게 되는데, 이 경우 연산자 오버로딩을 해줘야 한다.오버로딩을 한 객체라도 그걸 object타입 레퍼런스로 받아서 쓸 경우 디폴트 연산자가 사용되므로 주의하고, 가장 좋은 건 ==를 동일 객체의 참조 여부 확인에만 쓰는 버릇을 들이는 것 같다." }, { "title": "Chirpy Theme에서 카테고리 및 태그에 특수문자 사용 문제", "url": "/posts/chripy_special_character/", "categories": "etc", "tags": "Blog", "date": "2023-08-28 00:00:00 +0900", "snippet": "내가 Github Blog에서 사용하는 Chirpy Theme는 포스트에 카테고리와 태그를 지정하면 사이트 빌드 단계에서 카테고리와 태그 페이지를 생성해준다.이게 블로그를 그나마 요즘(?) 블로그답게 만들어주는 중요한 기능인데, 문제는 태그나 카테고리에 특수문자를 넣으면 카테고리 페이지에서는 그걸 반영하지만, 해당 페이지로 가는 링크 주소는 특수문자를 지원하지 않으므로 특문을 무시해버리는 문제가 있었다.즉 카테고리명이 C#이면 링크 주소에서는 특문인 #를 빼버리고 C만 남긴다는 것이다.문제는 C++의 경우에도 같은 원리로 특문을 빼버리므로, 둘다 링크 자체는 C가 된다는 것.블로그를 처음 만들 때부터 상당히 골치아픈 문제였는데, 처음에는 내부 코드를 수정해서 링크 주소의 특수문자를 HTML 특수문자 코드로 변경하려고 했지만 코드 분석하기가 너무 귀찮았다…OTL결국 선택한 해법은 그냥 포스트 내에서 카테고리/태그명에 들어가는 특문을 HTML 코드로 써버리는 것이었다. 이걸로 해결될까 싶었는데 일단 되긴 된다.…나는 왜 이 간단한 방법을 테스트도 안해보고 블로그를 년 단위로 방치한 거지??" }, { "title": "using과 try catch finally의 차이점", "url": "/posts/using_try_catch/", "categories": "C&#35;", "tags": "C&#35;", "date": "2023-08-27 00:00:00 +0900", "snippet": "파일 관리 코드를 짜다가 using과 try-finally구문이 기능적으로 비슷하다는 생각이 들어서 한번 구글링을 해봤다.그리고 재미있는 사실을 알게 되었는데, using과 try-finally는 동일한 기능일 뿐 아니라 컴파일러 레벨에서도 동일한 결과물을 작성한다는 것이다.대신 using은 블록이 끝날 때 자체적으로 Dispose를 호출하고 이를 보장하며, finally는 종료시 처리할 구문을 커스터마이징할 수 있다는 차이가 있다. 즉, finally구문 내에서 Dispose를 호출할 경우 둘은 실질적으로 동일한 기능을 수행한다.아래는 참고한 자료들. C# using과 try catch finally의 차이점 ‘using’ statement vs ‘try finally’사소하지만 C#을 꽤 오래 쓰면서도 모르고 있던 부분이라 기록해둔다." }, { "title": "Unity에서 복잡한 Prefab의 Bound를 얻는 방법", "url": "/posts/unity_bound/", "categories": "Unity", "tags": "Unity", "date": "2023-03-31 00:00:00 +0900", "snippet": "사용중인 에셋이 객체의 Bound를 얻는 부분을 다음과 같이 처리하고 있었다.Mesh mesh = voxel.mesh;Bound bounds = mesh.Bounds;이렇게 하면 prefab에 자식 오브젝트가 붙어있거거나 scale이 조정되어 있는 경우 제대로 인식할 수 없어 복잡한 프리팹의 경우 bound가 이상하게 잡히게 된다.이런 경우 전체 프리팹의 정확한 bound를 얻는 코드는 다음과 같다.Bounds _bound;public Bounds bounds{ get { if (_bound.size == Vector3.zero &amp;amp;&amp;amp; prefab != null) { Renderer[] renderers = prefab.GetComponentsInChildren&amp;lt;Renderer&amp;gt;(); if (renderers.Length &amp;gt; 0) { _bound = renderers[0].bounds; for (int i = 1, ni = renderers.Length; i &amp;lt; ni; i++) { _bound.Encapsulate(renderers[i].bounds); } } } return _bound; }}아래는 참고한 자료들. Bounds 살펴보기 Getting the total bounds of a Prefab with Multiple Children.일단 이 코드가 정상동작하는 것은 확인했다.이게 최적화된 코드인지는 모르겠지만 어차피 내부적으로 메쉬나 스케일이 변경되지 않는 한 bound도 바뀌지 않으므로, 처음 호출될 때 한 번만 계산한다면 성능 문제는 거의 없을 것 같다." }, { "title": "SourceTree에서 failed code 128: fatal unsafe repository 에러 해결법", "url": "/posts/sorucetree_unsafe_repo/", "categories": "etc", "tags": "etc", "date": "2023-03-29 00:00:00 +0900", "snippet": "이번에 PC를 교체하고 SourceTree를 새로 깔았는데 이 블로그가 저장된 리포지터리를 등록하려고 하니 에러가 발생했다.나는 github 블로그를 시놀로지 NAS에서 돌리기 때문에 이 블로그의 소스가 있는 리포지터리는 네트워크 드라이브(Z:)에 있었는데, 이게 뭔가 보안 문제를 일으키는 거라는 추측은 쉽게 할 수 있었다.하지만 전에는 멀쩡하게 되던 게 소스트리 새로 설치하니까 안 되는건 뭐란 말인가?대체 뭔 문제인가 하고 찾아보니 Git이 업데이트되면서 보안 관련으로 뭔가 추가되어서인 것 같다. 상당히 많이 발생한 문제여서인지 열받은 사람들도 많았던 모양. Fix that damn Git Unsafe Repository가장 많이 나오는 답변은 Git Config를 설정하는 것이었다. 방법은 다음과 같다.git config --global --add safe.directory &amp;lt;Git folder&amp;gt;하지만 이대로 해봐도 전혀 해결이 되지 않았다.뭐가 문제인지 찾던 도중 나와 같은 문제를 겪는 사람을 찾아냈다. 소스트리 unsafe .. owned by soneone else 에러요약하자면, git config로 safe 경로를 등록할 때 디렉토리를 리눅스 스타일로 /로 구분해야 한다는 것이다. \\나 \\\\로 되어 있으면 안 먹힌다.경로를 윈도우 탐색기에서 붙여넣으면 저 부분에서 문제가 생긴다. 이것도 위에 링크한 포스트 작성자가 나와 동일하게 겪은 문제다.git의 설정은 C:\\Users&amp;lt;username&amp;gt;.gitconfig 파일에 저장되는데, 여기에 [safe]라는 항목에 관련 설정이 저장된다. 위의 커맨드를 입력하고 파일을 열어보면 등록한 폴더 경로를 확인할 수 있는데, 이 파일을 수정하고 SourceTree를 재시작하면 바뀐 설정이 적용된다.하지만 내 경우, 여기까지 해도 문제가 해결되지 않았다.네트워크 드라이브 경로는 safe.directory로 지정해도 안되는건가? 하지만 NAS에서 블로그를 돌리려면 다른 곳으로 옮길 수가 없는데…그런 생각을 하면서 에러메세지를 다시 보니 눈에 띄는 부분이 있었다.메세지에는 네트워크 드라이브 경로에 대해 %(prefix)///SynologyNAS720/Data/Inbird81.github.io를 넣으라고 되어 있다. 나는 당연히 앞의 %(prefix)는 뭔가의 오류로 출력된 것이고 //부터가 정상적인 경로일 거라고 생각했는데, 혹시나 싶어 앞의 %(prefix)까지 그대로 넣어보니 정상적으로 동작했다.확실히는 모르겠지만 저거 자체가 \\\\를 표기하기 위한 코드로 같이 들어가야 하는 것 같다.그리고 에러 메세지 자체에 경로가 /로 표시되어 있다. 이 메세지를 복붙할 수 있었으면 오히려 금방 해결됐을지도 모르는데, 왜 메세지창 텍스트는 copy &amp;amp; paste가 안 되는 걸까…추가로, safe.directory에 네트워크 드라이브의 드라이브 경로(z:/xxxx)를 넣어도 동작하지 않는다. //로 시작하는 네트워크 경로만 인식하는 것 같다." }, { "title": "SourceTree에서 로그인 관련 문제 발생시 대처법", "url": "/posts/sorucetree_hosts/", "categories": "etc", "tags": "etc", "date": "2023-03-28 00:00:00 +0900", "snippet": "SourceTree 사용중에 원격 리포지터리를 clone하려고 했더니 로그인 ID/패스워드를 입력하는 창에 잘못된 ID가 고정되어 있고 입력창에서 바꿀 수 없는 문제가 있었다. 뻔하게 틀린 ID인데 이걸 바꿀 수가 없으니 황당했는데, 대체 뭐가 문제인지 찾아본 결과 SourceTree는 로그인 계정을 하나만 취급한다는 글을 발견했다. SOURCETREE 오류 - 원격저장소 로그인 정보 삭제 하기 Sourcetree change password of existing accountSourceTree에서 계정정보를 바꾸는 방법은 옵션의 설정 등 여러 가지가 있지만 제대로 동작하는지 확실하지 않고, 대부분 가장 확실한 방법으로 password/userhosts 파일을 삭제하라고 하고 있다.이 파일들이 있는 위치는 C:\\Users\\&amp;lt;username&amp;gt;\\AppData\\Local\\Atlassian\\SourceTree이고, 사무실 PC에서 발생했던 문제는 이 방법으로 해결했다.문제는 집의 PC에는 해당 위치에 password/userhosts 파일이 없다는 것이다.windows 11이 문제인가 싶어서 검색해봤지만 찾아봐도 딱히 나오는 것은 없었다.소스트리의 최신버전이 계정 저장방식을 바꾼 것인지 windows 11의 문제인지, 단순히 내가 뭔자의 이유로 파일을 못 발견한 건지 모르겠다.일단 C:\\Users\\&amp;lt;username&amp;gt;\\AppData\\Local\\Atlassian\\SourceTree\\accounts.json파일이 계정정보로 추정되는 것을 보관하고 있는 것은 확인했지만, 이게 기존의 password/userhosts 파일을 대체하는지는 알 수 없었다.그 외에 소스트리 내에서 계정을 관리하는 곳은 다음과 같다. 도구-&amp;gt;옵션-&amp;gt;일반-&amp;gt;전역 사용자 설정 저장소별 설정-&amp;gt;고급-&amp;gt;사용자 정보-&amp;gt;전역 사용자 설정 사용 체크이 계정문제는 늘 잊을만하면 한번씩 터지고, password/userhosts 파일이 없는 문제는 아직도 원인을 찾지 못해서 일단 확인된 것들만 정리해둔다." }, { "title": "C#의 string은 reference type인가?", "url": "/posts/csharp_string/", "categories": "C&#35;", "tags": "C&#35;", "date": "2023-02-16 00:00:00 +0900", "snippet": "C#에서 string은 기본 타입이지만 int나 char같은 다른 기본 타입들과는 처리가 다르다.별로 신경쓸 일이 많진 않은데, 그래서 종종 기억해놨다가도 까먹는 일이 있어서 정리해둔다.c#의 string은 참조 타입(reference type)이며 불변(immutable)이다.참조 타입이라는 것은 클래스처럼 대입시 값이 복사되지 않고 참조 주소, 즉 포인터가 대입된다는 뜻이다. 하지만 불변성이므로 string은 값을 변경할 수 없고, 변경할 경우 내부적으로 새로운 string 객체를 생성해 반환한다. How do strings work when shallow copying something in C#? C# - string 타입은 shallow copy일까요? deep copy일까요?이걸 찾게 된 이유는 스크립트 함수명과 함수가 들어 있는 파일명이 n:1로 대응되는 테이블을 만들 일이 생겼기 때문이었다.이걸 그냥 Dictionary&amp;lt;string, string&amp;gt;으로 구현하면 같은 파일명 문자열이 중복으로 생성되어 낭비가 되므로 다음과 같이 구현했다.Dictionary&amp;lt;string, string&amp;gt; funcFileSet;HashSet&amp;lt;string&amp;gt; files;foreach(var pair in orgFuncFileSet){ string fileName = pair.value; if(!files.Add(fileName)) fileName = Files.First(x =&amp;gt; x == fileName); funcFileSet.add(pair.key, filename);}HashSet은 중복이 허용되지 않으므로 동일한 파일명 string이 중복으로 생성되어 메모리를 낭비하는 걸 막을 수 있다.다만 성능은 안 좋아보이고 코드 자체도 마음에 들지 않으므로 최적화할 방법을 생각해봐야겠다." }, { "title": "유니티 onClick.AddListener에서 함수 파라미터 전달 문제", "url": "/posts/unity_button_addlistener/", "categories": "Unity", "tags": "Unity", "date": "2023-02-14 00:00:00 +0900", "snippet": "유니티에서 버튼에 이벤트 함수를 등록하는 기능을 구현하다가, 파라메터가 있는 함수를 다음과 같이 구현했다.button.onClick.RemoveAllListeners();button.onClick.AddListener(() =&amp;gt; { target = table[i]; RefleshPanel(); });실행해보니 에러가 발생했고, i에 루프의 최대값이 들어가 있었다.뭔 일인가 해서 찾아보니 나름 알려진 문제였는지 바로 구글신께서 계시를 내려주셨다.참조한 자료들은 아래와 같다. [Unity] onClick.AddListener() 함수의 파라미터 전달 문제 유니티 onClick.AddListener에서 함수의 파라미터 전달 문제다음과 같이 임시 변수를 만들어 처리해야 한다.button.onClick.RemoveAllListeners();button.onClick.AddListener(() =&amp;gt; { target = table[i]; int index = i; RefleshPanel(index); });참고한 게시물들에는 이유는 적혀 있지 않지만, 디버거를 돌려본 결과 람다식 내부의 처리는 AddListener()의 실행 시점이 아니라 호출 시점에 이루어졌다.호출 시점에서는 i가 루프를 한바퀴 다 돈 뒤니 루프의 가장 마지막 값(위의 예시에서는 32였다)이 되어 있는 것.이게 어떤 원리로 처리되는지는 잘 모르겠는데 나중에 알게 되면 따로 포스팅을 올릴 생각이다." }, { "title": "UTF-8 BOM에 대한 정보와 SourceTree에서의 문제", "url": "/posts/utf8-bom-sourcetree/", "categories": "etc", "tags": "etc", "date": "2023-01-19 00:00:00 +0900", "snippet": "작업하다가 UTF-8과 UTF-8 BOM과 관련해서 좀 문제가 생겼고, 그 과정에서 구글링하다 알게 된 것들이 있어 정리한다.일단 늘 그렇듯 참고자료. UTF-8 인코딩에서의 BOM(Byte Order Mark) 문제 What’s the difference between UTF-8 and UTF-8 with BOM?BOM(Byte Order Mark)은 UTF-8(혹은 16/32)로 인코딩된 문서의 인코딩 방식을 식별하기 위해 파일 맨 앞에 붙는 2~4바이트의 식별코드이다.일단 내가 헷갈렸다가 이번에 확인한 것들을 정리하자면… UTF-8 BOM과 UTF-8은 맨 앞의 3바이트 식별코드 외에는 동일하다. 코드페이지도 둘다 65001이며, 다른 인코딩 방식이 아니다. 이게 같은 파일을 어떤 툴은 그냥 UTF-8이라고 하고 어떤 툴은 UTF-8 BOM이라고 해서 헷갈렸는데, 그냥 전자가 BOM을 따로 분류해주지 않을 뿐이었다. Visual Studio는 문서를 UTF-8 BOM으로만 저장할 수 있다. VS 2017/2019는 파일-다른 이름으로 저장에서 저장 버튼 옆의 팝업을 클릭하면 인코딩을 바꿔 저장할 수 있다. 여기서 확인해보면 UTF-8 BOM만 있다. 즉, 최소한 윈도우판 Visual Studio 2017/2019는 UTF-8 without BOM을 따로 지원하지 않는다. UTF-8 without BOM을 인식하는 확실하고 표준화된 방법은 없다. 양키들은 문제없다고 하지만 그건 영어권 사용자들 이야기고요. 한국어 인코딩(CP949), 일본어 인코딩(Shift-JIS)으로 저장된 문서를 UTF-8 without BOM과 구분하지 못하는 툴은 의외로 흔하다. 당연하지만 VS2019도 구분 못해서 다 깨짐. 이 포스팅을 쓰게 된 이유지만, 윈도우 버전 SourceTree에서 유니티 프로젝트를 관리할 경우는 UTF-8 BOM을 쓰는 것이 좋아 보인다. 따로 설명해야 할 건 4인데, 일단 SourceTree는 EUC-KR이나 CP949로 저장된 파일을 제대로 출력하지 못한다.위 파일은 EUC-KR로 저장되어 있었던 코드를 UTF-8로 바꾼 결과이다.그리고 텍스트 형식으로 저장하는 유니티의 씬이나 프리팹, 에셋 등을 UTF-8 without BOM으로 저장하면 이걸 바이너리 파일로 인식해버리는 경우가 있었다.이러면 diff가 안 보이므로 상당히 불편해진다.UTF-8 BOM으로 인코딩을 변경하면 SourceTree가 파일을 정상적으로 텍스트로 인식한다.졸려서 좀 횡설수설하는 것 같지만 요약하자면… 한국어나 다른 외국어가 들어간 파일을 윈도우에서만 쓸 경우, UTF-8 BOM으로 저장하는 게 더 좋다. 리눅스/유닉스 시스템에서 쓴다면 이야기가 다르겠지만. 유니티 씬이나 프리팹 파일을 SourceTree가 바이너리라고 인식할 경우, UTF-8 BOM으로 인코딩을 바꾸면 해결된다. UTF-8 외의 인코딩으로 저장된 소스 파일이 있으면 싹 바꾸자. 대체 왜 있는진 모르겠지만 변환툴을 돌려보니 의외로 많이 나와서 놀랐다. 그리고 번외지만, JSON 파일에는 BOM을 넣지 않는 것이 원칙인 듯. JSON Specification and usage of BOM/charset-encoding내 개발환경에서는 이게 딱히 문제가 된 적은 없지만 주의할 필요는 있을 것 같다." }, { "title": "Unity 2021에서 추가된 Object Pool 기능", "url": "/posts/unity_objectpool/", "categories": "Unity", "tags": "Unity", "date": "2023-01-19 00:00:00 +0900", "snippet": "Object Pool이야 유니티에서 가장 잘 알려진 테크닉 중 하나겠지만, 이게 유니티 2021에서 공식 지원되었다는 건 얼마 전에야 알게 되었다.오랫동안한동안 슬럼프라서 버리고 살았던 블로그를 다시 활성화시킬 겸 간단하게 정리해본다.참조한 자료들은 아래와 같다. [Unity] 유니티 공식 지원 오브젝트 풀링 Object Pooling 유니티에서 이용하기사실 워낙 간단해서 따로 설명할만한 게 없다.먼저 오브젝트 풀로 관리될 객체의 클래스에 다음을 추가한다.using UnityEngine;using UnityEngine.Pool;public class Rabbit : MonoBehaviour{ . private IObjectPool&amp;lt;Rabbit&amp;gt; _RabbitPool; . . . public void SetPool(IObjectPool&amp;lt;Rabbit&amp;gt; pool) { _RabbitPool = pool; } public void DestroyRabbit() { _RabbitPool.Release(this); }}오브젝트 풀을 관리할 클래스는 다음과 같이 구현한다.using UnityEngine;using UnityEngine.Pool;public partial class PoolManager : Singleton&amp;lt;PoolManager&amp;gt;{ public GameObject RabbitPrefab; public IObjectPool&amp;lt;Rabbit&amp;gt; RabbitPool { get; private set; } private void InitPools() // 초기화 때 실행되는 함수 { // 오브젝트 생성, 풀에서 꺼낼 때, 풀로 회수할 때, 풀에서 제거될 때 // 각각에 대한 이벤트 함수를 등록한다. RabbitPool = new ObjectPool&amp;lt;Rabbit&amp;gt;( CreateRabbit, OnGetRabbit, OnReleaseRabbit, OnDestroyRabbit); } // 오브젝트가 생성될 때 실행 private Rabbit CreateRabbit() { var rabbit = Instantiate(RabbitPrefab) .GetComponent&amp;lt;Rabbit&amp;gt;(); rabbit.SetPool(RabbitPool); // 관리 풀을 참조할 수 있게 넘김. return rabbit; } // 풀에서 오브젝트를 꺼낼 때 실행 private void OnGetRabbit(Rabbit rabbit) { rabbit.gameObject.SetActive(true); } // 오브젝트를 풀에 회수할 때 실행 private void OnReleaseRabbit(Rabbit rabbit) { rabbit.gameObject.SetActive(false); } // 오브젝트를 풀에서 제거할 때 실행 private void OnDestroyRabbit(Rabbit rabbit) { Destroy(rabbit.gameObject); }}사용법은 다음과 같다.// 풀에서 꺼낼 때. 없으면 알아서 생성해준다.Rabbit rabbit = GameManager.Instance.RabbitPool.Get();// 씬에서 제거할 때(즉 풀로 돌려보낼때)rabbit.DestroyRabbit();오브젝트 풀을 구현하는 건 어렵지 않지만, 유니티가 공식으로 지원하는 데 안 쓸 이유가 없다. C#은 원래 있는 거 쓰는 게 성능 뽑는 가장 쉬운 방법이기도 하고." }, { "title": "[Unity] new input system에서 키/버튼 중복 문제", "url": "/posts/unity_input_system_button_event/", "categories": "Unity, Input System", "tags": "Unity, Input System", "date": "2022-06-30 00:00:00 +0900", "snippet": "유니티 new Input System에서 키 입력에 함수를 할당하는 방법은 매우 간단하다.먼저 Input Action Asset을 설정하고Player Input 컴포넌트에 에셋을 할당하고 연결 방식을 설정한 후키 입력을 전달하는 방법은 몇 가지가 있지만, 여기서는 Unity Event를 사용했다.이벤트 핸들러를 연결해주면 된다.이렇게만 하면 짜잔! 하고 키 입력이 동작하지만…테스트해본 결과 X를 누를 때마다 Placebrick() 함수가 세 번씩 실행되는 현상을 발견했다.도대체 이 황당한 현상은 뭔가 싶어서 구글링을 해봤고, 나와 같은 문제로 고통받는 사람들을 금방 찾을 수 있었다. Input System Button Triggers Multiple Times button trigger behaviour: “release only” triggers twice!?이 문제가 2년째 해결되지 않고 있다고 분노하는 포럼 유저가 인상깊었다.어쨌든, Input System 메뉴얼에 따르면 입력에 따른 상호작용의 단계는 4가지가 있다. Phase Description Waiting The Interaction is waiting for input. Started The Interaction has been started (that is, it received some of its expected input), but is not complete yet. Performed The Interaction is complete. Canceled The Interaction was interrupted and aborted. For example, the user pressed and then released a button before the minimum time required for a hold Interaction to complete. 버튼의 경우 Started는 버튼을 누르기 시작한 순간, Performed는 버튼이 완전히(설정된 임계값 이상의 강도로) 눌러졌을 때, Canceled는 버튼에서 손을 뗄 때 발생한다.그리고 이벤트에 연결된 콜백 함수의 호출은 Started, Performed, Canceled 3가지 각각에 대해 발생한다.확인을 위해 로그를 찍어 보았다. public void PlaceBrick(InputAction.CallbackContext value) { Debug.Log(&quot;context : &quot; + value.ReadValue&amp;lt;float&amp;gt;().ToString()); Debug.Log(&quot;start : &quot; + value.started + &quot; / &quot; + &quot;perform : &quot; + value.performed + &quot; / &quot; + &quot;cancel : &quot; + value.canceled); . . }결과 :value는 입력 강도(얼마나 눌러졌는지)를 나타내는 것 같은데, 키보드의 경우 누르면 1, 떼면 0인 것으로 보인다.결국 이걸 해결하려면 상태 체크를 해야 한다.if (!value.performed) return; // performed일 때만 동작해야 함. 아니면 버튼 누를 때마다 3번씩 호출된다.조이스틱이나 패드 버튼을 감안해서 범용적으로 동작하도록 설계한 건 알겠는데, 왜 이런 부분을 Input Action Asset 내부에서 설정하지 않고 유저가 코드를 쓰도록 만들어 놨는지 모르겠다.그냥 단순하게 키보드 입력 받아서 동작하는 기능을 구현하려는 사람에게는 개선이 아니라 개악 아닌가?" }, { "title": "[Unity] new input system 에서 drag 쉽게 구현하기", "url": "/posts/unity_input_system_drag_mouse/", "categories": "Unity, Input System", "tags": "Unity, Input System", "date": "2022-06-28 00:00:00 +0900", "snippet": "작업중이던 프로젝트의 입력 컨트롤을 유니티의 new Input System으로 교체했다.그리고 최근에, 마우스 버튼을 누른 상태로 드래그해서 시점을 전환하는 기능을 구현하려고 했다.구글링을 해보니 코드를 쓰는 방법이 이것저것 나와 있는데, Modifier 기능을 사용하면 코드 없이도 Input Action Asset 내에서 설정만으로 두 개 이상의 키를 조합할 수 있다.방법은 간단하다.이렇게 우클릭해서이렇게 설정하면 된다.내가 검색을 잘 못해서인지 의외로 잘 나와있지 않은 방법이라 따로 정리한다.출처 : https://forum.unity.com/threads/simple-mouse-drag.805266/마우스 클릭이 설정된 행동이 여러 개가 있을 경우(예를 들어 마우스 우클릭 상태로 드래그해서 시점 전환 - 마우스 우클릭으로 상호작용) 유니티 엔진 특성상 문제가 생길 수 있다고 하는데, 아직은 이 문제를 신경쓸 일은 없을 것 같다." }, { "title": "[Unity] 의문의 초기화", "url": "/posts/unity_public_intital_value/", "categories": "Unity", "tags": "Unity", "date": "2022-06-22 00:00:00 +0900", "snippet": "작업 중에 간단하게 배열의 초기값을 설정하는 코드를 짰다. [Header(&quot;Items&quot;)] public List&amp;lt;InventoryItem&amp;gt; playerItems; void OnEnable() { if (items == null) { // 인벤토리는 기본적으로 Null로 채운다. playerItems = Enumerable.Repeat(InventoryItem.Null, InventorySize).ToList(); Debug.Log(&quot;인벤토리 초기화 : &quot; + playerItems.Count); } } 그런데 게임을 돌려보니, 저 초기화 코드가 실행되질 않았다.전체 코드를 몇 번이나 검토해봤지만 이걸 초기화하는 다른 코드는 없었다.List는 class이므로 따로 초기화하지 않으면 반드시 null이어야 하는데?이해할 수 없는 상황에’어딘가에 playerItems에 값을 대입하는 내가 모르는 코드가 있겠지’ 하고 한참 동안이나 코드를 뒤지다가, 문득 든 생각에 유니티 인스펙터를 살펴봤다.아…유니티 MonoBehaviour를 상속받아 컴포넌트로 들어가는 클래스에서, public로 선언된 멤버 변수는 인스펙터에 노출되고, 이 과정에서 자동으로 초기화된다.이 경우 디폴트 값(List의 경우는 빈 배열)이 들어가며 List가 null이 아니게 되어 코드가 실행되지 않았던 것이다.의외로 실수하기 쉬운 부분인 것 같아 정리해둔다." }, { "title": "[C#] ?, ??, ??=", "url": "/posts/null_conditional_operators/", "categories": "C&#35;", "tags": "C&#35;", "date": "2022-06-12 00:00:00 +0900", "snippet": "C#은 버전이 올라가면서 계속 유용한 기능들을 새로 추가하고 있는데, 편리하긴 하지만 그만큼 알아야 할 게 늘어나는 문제점도 있다.그리고 이런 언어 기능들을 사용하다 보면 코드는 간단해지지만, 이게 C언어가 맞나 싶은 형태의 코드가 늘어나게 된다. 대표적인 게 linq나 람다식(Lambda Expression) 같은 것들.그리고 최근에 알게 된 게 널 조건 연산자(Null-conditional operators)다.C#도 결국 C 베이스 언어라 null 체크를 할 일이 엄청나게 많은데, 이 연산자는 그 작업을 간략화시켜 준다.이건 잘 설명해놓은 글이 많으므로, 내가 참고한 포스트들을 정리한다. C# 메모. 널 조건 연산자(Null-conditional operators) 널 조건 연산자 (Null-conditional operator) 연산자 ?? 및 ??= MSDN ?? 및 ??= 연산자(C# 참조)상세한 내용은 링크한 포스트들 쪽에 잘 정리되어 있으므로 간단한 사용법만 적어본다.예를 들어 아래와 같은 null 체크 코드가 있다고 하자.UserClass class1;// case 1if(class1 != null) ret = class1.foo();else ret = null;// case 2if(class1 != null) retInt = class1.fooInt();else ret = 0;case 1은 다음과 같이 간략화할 수 있다ret = class1?.foo(); // ?.는 피연산자가 null이면 null을, 아니면 결과를 반환한다.case 2는 다음의 두 가지 방법으로 간략화할 수 있다// nullable 타입을 사용int? retInt = class1?.fooInt();// ??= 연산자는 왼쪽 피연산자가 null일 때만 오른쪽 값을 대입한다.retInt ??= 0;// ?? 연산자는 왼쪽 피연산자가 null이면 오른쪽, 아니면 왼쪽 값을 반환한다.int retInt = class1?.fooInt() ?? 0;매우 편리하고 좋긴 한데, 이걸 쓰면 코드에 ?가 난무하게 된다.당장 NSDN에 이런 예시 코드가 있다.a ?? (b ?? c)d ??= (e ??= f)이게 뭔 경상도에서 가가 가가 가가가 하는 것도 아니고…유용하긴 한데 무슨 방언같아서 참 보기 뭐하다.그리고 개인적으로 C# 코딩할 때 매번 ContainsKey()를 호출하느라 가장 귀찮았던 Dictionary의 값 체크는 인덱스에 해당하는 값이 없으면 걍 exception을 뱉기 때문에 이걸로도 해결이 안 될 것 같다." }, { "title": "[Unity] Addressable에서 Build/Load Path 설정", "url": "/posts/addressable_path/", "categories": "Unity", "tags": "Unity", "date": "2022-05-04 00:00:00 +0900", "snippet": "어드레시블을 써본 감상은 이건 ‘원격 저장소에서’, ‘비동기로’ 읽어오는 것에 초점을 맞춰 만들어진 툴이구나, 하는 것이었다.‘비동기’ 쪽의 문제는 이전 게시물에서 이야기했는데, 개인적으로 더 고생한 문제는 저 ‘원격 저장소’ 쪽이었다.물론 어드레시블은 에셋을 로컬에 두고 쓰도록 설정할 수 있는데, 문제는 이 부분의 문서나 관련글을 찾기가 의외로 어려웠다는 점이다.어드레시블의 사용법 자체는 여기저기 설명된 게 많으며, 내가 참고한 게시물들은 다음과 같다. 어드레서블 에셋 시스템 - 개념: 어드레서블 윈도우, 시스템 동작 플로우 Unity - 어드레서블(Addressable) 어드레시블 강좌글 목록 어드레서블 에셋 시스템으로 메모리 최적화하기이쪽은 유니티 공식 블로그내가 고생했던 부분은 어드레시블의 설정 중, Build / Load Path에 관한 것이었다.어드레시블은 각 에셋 그룹의 설정에서 에셋이 빌드 후 저장되는 경로와 실제 플레이 시 에셋을 로드할 경로를 설정한다.여기서 로컬 에셋의 경우 LocalBuildPath / LocalLoadPath를 기본값으로 사용한다.이 기본 경로도 바꿀 수 있고, 혹은 Custom을 선택해 수동으로 경로를 입력할 수도 있다. LocalBuildPath/LocalLoadPath의 값 자체는 Manage Profile 메뉴에서 설정 가능하다.문제는 이 경로가 정확히 어디인지에 대한 설명이 없다는 것이다.[UnityEngine.AddressableAssets.Addressables.BuildPath]는 다행스럽게도 에디터에서 바로 확인할 수 있다.그런데 Load Path인 {UnityEngine.AddressableAssets.Addressables.RuntimePath}는 바이너리 실행 경로의 상대위치라서인지 정확한 위치를 알려주질 않는다.아니, 저기가 Load Path면 배포할 때 저 경로에 에셋들을 복사해서 같이 배포해야 하는데, 경로가 어딘지 모르면 어쩌라고?황당해서 한참을 뒤져봤지만, 아무리 뒤져도 저 RuntimePath가 정확히 어디인지를 알려주는 곳은 없었다.윈도우 버전에서는 이게 별 문제가 되지 않는다. LocalLoadPath를 무시하고 경로를 수동으로 입력할 경우, 바이너리 파일(.exe)의 경로로부터의 상대 경로로 지정되기 때문이다.그러니까 이렇게 설정하는 게 LocalBuildPath/LocalLoadPath보다 낫다.이렇게 하면 에셋이 바이너리가 빌드되는 경로 아래에 저장되므로 별도로 옮기고 할 거 없이 그대로 배포하면 된다.이게 정석적인 방법인지 편법인지는 모르겠지만 나는 이렇게 해서 지금까지 문제가 된 적은 없었다.그런데, 최근에 이렇게 개발된 게임을 모바일 버전으로 빌드해서 보고 싶다는 클라이언트의 요청이 있었다.그냥 모바일 화면에서 어떻게 보이는지 테스트하고 싶다는 거라(적어도 일단은) 별 문제 없겠거니 했는데…{UnityEngine.AddressableAssets.Addressables.RuntimePath}가 안드로이드에서는 정확히 어디인지를 알 수가 없었다.안드로이드에서는 경로를 수동으로 지정했을 때의 기준점, 그러니까 ‘/’가 어디인지를 알 수가 없기 때문에 LocalBuildPath를 써야 하는데, 이게 어딘지에 대한 이야기가 없다.이거 때문에 이틀 가까이를 개고생하다가, 간신히 단서를 찾을 수 있었다. Those files are generated when you build Addressables data, and wind up in the StreamingAssets folder.-Local Data in StreamingAssets The Addressables system only copies data from Addressables.BuildPath to the StreamingAssets folder during a Player build – it does not handle arbitrary paths specified through the LocalBuildPath or LocalLoadPath variables. If you build data to a different location or load data from a different location than the default, you must copy the data manually.-Addressable Assets Profiles빌드 단계에서 Addressables.BuildPath에 있는 파일들이 StreamingAssets으로 복사된다고?지푸라기라도 잡는 심정으로 직접 로그를 찍어서 확인해보기로 했다.안드로이드 APK에서 StreamingAssets의 경로는 &quot;jar:file://&quot; + Application.dataPath + &quot;!/assets다.확인을 위해 LocalBuildPath/LocalLoadPath의 값을 디폴트로 두고 빌드해본 후 apk 파일을 열어보니, 정말로 에셋이 apk 안에 들어 있었다.정확히는 assets/aa 폴더 아래고, profile 설정을 아예 건드리지 않았다면 assets/aa/android 일 수도 있다.이걸 제대로 읽어오는지 확인을 위해 로그를 박고 Logcat에서 확인해보았다.그리고 실행해 본 결과, 정상적으로 apk 내의 경로에서 에셋을 읽어오는 것을 확인할 수 있었다.왜 이걸 알아내는 게 이렇게 어려웠는지는 모르겠다.별로 고민할 필요가 없는 문제라서 그럴 수도 있다. 모바일의 경우 그냥 기본 설정을 쓰면 알아서 apk 내에 에셋이 저장되니까.아니면 assetbundle이나 streamingasset에 대한 지식이 있으면 너무 상식적인 거라 별도의 글로 정리할 필요가 없어서일 수도 있고, 단순히 내 검색능력이 형편없었던 걸 수도 있다.하지만 어쨌든 나는 이걸 알아내기 위해 며칠동안 삽질을 해야 했고, 나같은 사람이 더 있을지도 모르기 때문에 정리를 해 둔다.3줄 요약: addressable에서 LocalBuildPath는 어디인지 알기 쉽지만, PC 빌드의 경우 귀찮은 곳에 짱박히므로 수동설정해두면 편하다. PC판의 경우 LocalLoadPath는 어딘지 모르겠는데, 이것도 그냥 수동 설정해버리면 편하다. 안드로이드에서 LocalBuildPath/LocalLoadPath를 디폴트 값으로 놔두면 알아서 apk 내에 에셋이 포함된다." }, { "title": "[Unity] Addressable에서 동기식(synchronously) 로드", "url": "/posts/addressable/", "categories": "Unity", "tags": "Unity", "date": "2022-05-04 00:00:00 +0900", "snippet": "이번에 만든 게임에서 데이터를 addressable로 묶는 작업을 진행했다.addressable은 unity의 기존 asset bundle manager를 대신해 만들어진 새 기능이라고 하는데, 사실 나는 에셋번들도 써 본 적이 없으니 이번이 유니티 에셋번들을 처음 다뤄보는 셈이다.어차피 에셋번들 관련기능은 다 어드레시블로 통합될 것 같은 분위기라 배워둘 겸 이걸로 번들을 관리하기로 했는데, 쓰다 보니 몇 가지 문제가 있었다.첫째는, 어드레시블이 비동기(asynchronous)로드만을 지원한다는 것이다.어드레시블 에셋을 로드하는 함수는 LoadAssetAsync()만 있고, 동기식 로드 함수인 LoadAsset()은 삭제되었다.즉, addressable을 쓰면 프로젝트 전체를 비동기 구조에 맞춰 설계해야 한다는 것이다.그런 거 생각 안하고 이미 짜둔 코드를 바꾸려고 하면 당연히 재앙이 발생한다.문제는 이게 기존 에셋번들 매니저를 대체하는 차세대 라이브러리라는 점이다. 즉 기존 에셋번들 매니저는 더 못 쓰고, addressable이 유니티의 표준이므로 무조건 따라갈 수밖에 없다.당연히 여기에 불만을 가진 사람들은 당연히 엄청 많았다.아래 링크는 동기식 작업이 가능하던 asset bundle을 쓰다가 날벼락을 맞고 빡친 사람들과 ‘비동기 구조 그거 별 거 아닌데 왜 그렇게 열내냐’는 인간의 마음을 모르는 프로그래머들이 벌인 키배의 현장이다. https://forum.unity.com/threads/why-are-there-no-synchronously-loadasset-apis.539946/장장 3년에 걸친 키배 끝에 결국 유니티 테크놀로지측은 결국 어드레시블에 동기식 로드 기능을 추가하는 것으로 일단 이 문제는 마무리되었다.문제는 이게 제대로 된 동기 함수가 아니라 그냥 땜빵이라는 거지만.addressable의 동기 처리는 WaitForComplete() 함수를 통해 이루어진다.비동기 함수의 handle에서 WaitForComplete()를 실행하면 해당 함수가 완료될 때까지 코드를 더 실행하지 않고 대기하는 식이다.void Start(){ //Basic use case of forcing a synchronous load of a GameObject var op = Addressables.LoadAssetAsync&amp;lt;GameObject&amp;gt;(&quot;myGameObjectKey&quot;); GameObject go = op.WaitForCompletion(); //Do work... Addressables.Release(op);}출처 : https://docs.unity3d.com/Packages/com.unity.addressables@1.19/manual/SynchronousAddressables.html써본 결과 (당연히)정상적으로 동작했고, 실질 동기식 로드인 것처럼 처리할 수 있었다. 덕분에 어드레시블을 적용하다 개판이 될 뻔 한 프로젝트도 정상적으로 마무리할 수 있었다.이게 2021년에 나왔으니 망정이지 더 늦었으면 진짜 x될 뻔한 상황이었다.문제는, 이 함수에는 이런 설명이 붙어 있다는 점이다. All currently active Asset Load operations are completed when WaitForCompletion is called on any Asset Load operation, due to how Async operations are handled in the Engine. To avoid unexpected stalls, use WaitForCompletion when the current operation count is known, and the intention is for all active operations to complete synchronously.에셋을 로드하는 중에 WaitForCompletion()이 호출되면, 현재 진행중인 ‘모든’ 비동기 에셋 로딩이 끝날 때까지 대기한다는 내용이다.그러니까 비동기로 에셋 여러 개를 동시에 로드하면서, 그 중 필요한 것만 동기식으로 불러들일 수가 없다. 에러는 나지 않겠지만 비동기 로드 전부가 대기를 타버리기 때문에 지연이 발생할 수 있다.내가 만들고 있는 게임이야 이걸로 문제가 생길 여지는 거의 없지만, 2022년 5월 현재 최신버전인 1.19에서도 동일하게 명시되어 있는 내용이므로 사용시 주의할 필요가 있어 보인다." }, { "title": "Animation 사이트 Mixamo 소개 및 사용법", "url": "/posts/mixamo/", "categories": "etc", "tags": "", "date": "2022-05-02 00:00:00 +0900", "snippet": "무료로 캐릭터 애니메이션을 다운받을 수 있는 Mixamo라는 사이트가 있는 걸 알게 되었다.꽤 유명한 사이트인 것 같은데 내가 요즘 게임개발에 대해 뭘 알아야 말이지…ㅠㅜ늦게라도 알았으니 기록해두자.사이트 https://www.mixamo.com/#/사용법 [유니티(Unity)] 무료 Character, Animation 사이트인 Mixamo 설정 방법" }, { "title": "Synology Nas에서 Gitea 사용하기", "url": "/posts/install-gitea-Synology-nas/", "categories": "etc", "tags": "Git, Synology", "date": "2022-05-01 00:00:00 +0900", "snippet": "블로그에 글을 올리려고 보니 거의 3달이 지나 있었다.거의 3달을 게으름으로 날려먹은 셈이니, 자괴감이 이만저만이 아니다.원래 이 포스팅도 2월달에 NAS 세팅하고 올라갔어야 할 글인데…원래 NAS를 지른 이유는 개인용 겸 지금 일하는 팀에서 쓸 Git 서버를 구축하기 위해서였다. 팀에서 서버로 쓰던 PC가 맛이 가버려서, 개인서버 구축하는 김에 같이 쓸 계획이었다.원래는 gitlab을 깔 생각이었지만, 막상 설치하고 확인해보니 이건 개인용으로 돌리기에는 너무 무거운 물건이었다.일단 메모리를 2gb 넘게 먹는데다, 기능도 상당히 복잡했다. 개인용 서버 구축보다는 github같은 커뮤니티 구축에 더 어울릴 것 같았다.이 정도로 강력한 기능은 필요하지 않아서, 좀 더 가볍고 쉽게 쓸 수 있는 git 서버를 찾다가 gitea를 발견했다.사용해본 감상은 꽤 만족스러웠다. 가볍고, 있을 건 다 있다.사실 거의 나 혼자 쓰는 서버고 프로젝트 관리도 프로세스도 없는 거나 마찬가지라 기능은 딱히 쓰는 것도 없고.설치 작업에 참고한 포스팅과 영상 주소는 다음과 같다. https://itslog.tistory.com/entry/Gitea-in-docker https://youtu.be/jTwtna4BuxE설치는 Docker에서 gitea를 검색해서 이미지를 다운받은 후 등록하면 된다.그 다음 포트를 설정해준다. gitea는 22번(SSH)과 3000번 포트를 사용하며, 보안을 위해 로컬 포트는 적당히 다른 걸로 연결해주는 것이 좋다.꼭 필요한 작업은 아니지만, 나는 Gitea의 주요 파일들에 직접 접근하기 위해 주요 경로에 마운트를 걸어뒀다.Gitea의 설정 파일을 건드리거나 로그를 확인하거나 할 때는 도커의 console로 컨테이너에 접근해야 하는데, 이게 상당히 불편하다.마운트를 걸어두면 그럴 필요 없이 연결된 폴더에서 바로 파일을 수정할 수 있다.내 경우는 혹시나 싶어서 저장소 폴더에도 마운트를 걸어뒀다.참고한 블로그와 영상에서는 시놀로지 역방향(Reverse) 프록시 설정에 대한 내용이 있는데, 이 부분은 내가 개념을 잘 몰라서 패스하고 그냥 설치했다.여기까지 설정하면 설치는 끝나고, 그 뒤는 계정 만들고 저장소 생성해서 쓰면 된다.거의 3개월을 놀다가 와서 쓰는 거라 당시 작업이 잘 기억이 안 나지만, 설치 과정에서는 특별한 이슈가 없었던 것 같다. 설정 파일 접근하기 쉽게 /data/gitea 폴더에 마운트 걸어두는 것 정도?" }, { "title": "네이버 블로그 게시물 이전", "url": "/posts/backup_naver_blog/", "categories": "Diary", "tags": "", "date": "2022-02-18 00:00:00 +0900", "snippet": "2008-2013년 사이에 쓰던 네이버 블로그에서 프로그래밍 관련 글을 이 쪽으로 이전하기로 했다.워낙 옛날 일이라 잊어버렸던 것도 있고, 적혀 있는 글도 다 10년 이상 전의 이야기라 지금 환경에서는 아무 도움도 안 될 것 같아서 버려두고 있었는데…문득 생각나서 들어가보니 이 사람 없는 블로그에도 댓글을 단 사람들이 있었다.내가 써놓고 잊어버렸던 글이 누군가가 코딩하다 겪는 고통을 해결하는 데 도움을 준 것이다.내 포스팅 하나가 ‘어떤 블로그의 존나 옛날 글’이 된 셈이 댓글들을 옛날에 봤었는데 잊어버린 건지 정말로 이번에 처음 보는 건진 모르겠지만, 어쨌든 블로그 글을 옮기기로 결정한 건 이 댓글들을 보고서였다.내 글이 누군가의 야근을 줄여줬다는 소소한 자랑거리기도 하고, 이쪽 블로그 포스팅 수도 좀 늘릴 겸… 어차피 네이버 블로그 쪽은 버린 지 오래니 손해볼 것도 없고.옛 블로그 글은 포스팅 작성일자를 원글 작성일에 맞출 예정이다. 괜히 2022년에 뭐 찾는 사람들이 2008년 글을 검색하게 만드는 것도 좋아 보이지 않고.하루에 2~3개씩만 가져와도 한 달쯤은 꾸준하게 포스팅할 수 있겠지." }, { "title": "[Unity] Input Manager 때문에 겪었던 문제", "url": "/posts/unity-input-manager-issue/", "categories": "Unity", "tags": "Unity", "date": "2022-02-17 00:00:00 +0900", "snippet": "개발중인 게임에서 UI 영역의 터치 인식을 위해 투명 이미지 버튼을 쓰는 꼼수를 사용하고 있었다.흔한 UGUI Button 사용법여기까지는 잘 동작하고 있었는데, 키보드 space 키를 눌렀을 때 터치와 동일한 효과가 나오게 해달라는 요청이 있었다.그거야 별로 어려울 거 없겠지?나는 그렇게 생각하고 바로 코드를 추가했다. protected void Update() { ... // 키 입력 처리 if (Input.GetKeyDown(KeyCode.Space)) // 스페이스 키 : 터치 { OnClick(); } ...물론 이것도 정상적으로 동작했다. 처음에는.그런데 몇 번 진행하다 보니 갑자기 스페이스 키 입력이 안 먹는 문제가 발생했다.대체 뭐지? 하고 로그를 찍고 디버거를 돌리고 난리를 피운 결과, 정확히는 입력이 안 먹히는 게 아니라 스페이스키를 누르면 OnClick()이 두 번 연달아 실행되고 있었다.키보드 입력 단독으로는 발생하지 않고, 마우스 클릭으로 OnClick()를 한 번 이상 발동시킨 후 스페이스키를 누르면 그때부터는 OnClick()이 두 번씩 실행되는 것.그리고 디버거를 돌려보니 한 번은 Input.GetKeyDown()쪽에서 키 입력을 받아 실행되는 거였고, 나머지 한 번은 마우스 클릭과 유사하게 이벤트로 실행되는 것 같았다.그렇다면 혹시 스페이스키가 어디선가 터치 혹은 마우스 클릭과 같은 기능을 하도록 어딘가에 디폴트 설정이 있는 게 아닐까?그런 생각에 유니티 Project Setting의 Input Manager 항목을 살펴보았다. 내가 유니티를 야매로 배우긴 했지만 입력 컨트롤러 관련으로 뭔가가 디폴트로 설정되어 있을만한 곳은 여기 말고는 생각나지 않았다.예상대로, Submit 항목에 space키와 관련된 설정이 있었다.이게 정확히 어떤 기능을 하는지는 모르겠지만, 추측하기로는 마우스로 UGUI 객체 클릭시 그게 내부적으로 어딘가에 등록이 되고, 그 상태에서 Submit에 등록된 입력(space, enter키 등)을 수행하면 그 객체를 클릭 혹은 터치하는 것으로 보는 것 같다.확인해보니 확실히 스페이스 뿐 아니라 엔터키로도 동일한 현상이 발생했고, 인풋 설정에서 스페이스키를 지우니 문제가 해결되었다.버그는 해결하긴 했지만 유니티 Input Manager가 정확히 어떻게 동작하고 UGUI와 어떻게 상호작용하는지는 잘 모르겠다. 터치 혹은 클릭과 완전히 동일하게 동작한다면 UGUI 객체를 한 번 이상 클릭한 후부터만 처리되는 것도 이상하고.나중에 본격적으로 컨트롤러나 키 입력을 다루는 게임을 만들게 되면 제대로 알아봐야 할 것 같다." }, { "title": "[Github] Github Blog에 이미지 올리는 방법들 정리", "url": "/posts/using-image/", "categories": "etc", "tags": "Blog", "date": "2022-02-12 00:00:00 +0900", "snippet": "Github blog를 쓰면 불편한 게 한둘이 아니지만 그 중에서 특히 신경쓰인 건 이미지 추가였다.블로그 자체적으로 이미지 업로드를 지원하는 게 아니니, 어딘가에 이미지를 따로 업로드하고 링크해야 한다.그리고 코딩이 다 그렇듯 방법은 여러 가지가 있다.Github Issue 사용깃허브의 Issue에 이미지를 업로드하고 링크해서 쓰는 편법(?)이다.검색하면 금방 찾을 수 있는 것이므로 따로 설명하진 않는다. [Github 블로그] 이미지 아주 쉽게 삽입하기로컬 PC의 이미지를 Issue창에 드래그하면 마찬가지로 업로드된다.Github repository content 사용 [Github] Github를 데이터 저장소처럼 활용해보자Github 저장소의 파일을 다음과 같은 경로 구조로 가져올 수 있다.https://raw.githubusercontent.com/:owner/:repo/:branch/:file_path내가 사용하고 있는 chirpy 테마의 개발자는 블로그 이미지용으로 별도의 저장소를 만들어 쓰고 있는 것 같다.블로그 이미지용 저장소를 별도로 만드는 것과, 그냥 기존 블로그 저장소에 이미지용 폴더를 추가하는 것 중 뭐가 더 나은 방법인지는 잘 모르겠다.그냥 블로그에 포함시키기이것저것 따질 거 없이 그냥 블로그 프로젝트 자체에 포함시킨 후 포스트랑 같이 commit해버리면 안 되나?일단 로컬에서는 되는 것을 확인했다. 이대로 push했을 때 github에서도 정상동작하는지 여부는 확인할 필요가 있다.(추가)깃헙에 push해도 이미지가 정상적으로 나온다.어느 방법이 좋을까1번, guthub issue를 이용하는 법은 의외로 간편하다. 드래그하고 경로를 복붙하기만 하면 된다. 드래그만 하면 끝인 위지윅 에디터만은 못하지만, 거기까지는 아무래도 욕심이고.그리고 이미지를 올린 시점에서 서버에 저장되니까 로컬과 VS code상에서도 이미지를 바로 보면서 작업할 수 있다.2번의 경우 먼저 이미지를 올려서 커밋하지 않으면 로컬에서 확인할 수 없다. 이 점은 조금 불편하다.3번의 경우 VS code상에서는 미리 볼 수 없지만, 로컬 서버에서는 미리보기가 된다.나는 세 번째 방법, 그러니까 그냥 이미지를 프로젝트에 포함시켜서 같이 커밋하는 방법을 쓰기로 했다.깃헙 이슈를 쓰는 방법은 아무래도 편법같은 느낌이 있고, 올린 이미지의 관리가 안 된다는 점이 신경쓰인다. 사실 그냥 막 올리고 잊어버리면 되긴 하지만…상황에 따라 1번 방법이나 다른 곳에 업로드하거나 하는 방법이 더 나을 수 있으니 봐가며 방법을 바꾸면 될 것 같다.Chirpy에서 이미지 경로 설정법Chirpy 테마는 이미지 경로를 좀 더 쉽게 지정할 수 있는 설정들을 제공한다.먼저 설정파일인 _config.yml에 전역 이미지 경로 설정을 적을 수 있다.이건 어딘가에 별도의 이미지 업로드 공간을 두는 경우 유용할 것 같다.그리고 포스트 헤더에 경로를 지정할 수 있다.---img_path: /img/path/---이 경로는 블로그 프로젝트 루트 기준의 상대경로로 지정해도 동작함을 확인했다. 내가 img 폴더에 이미지를 올린다면 /img/로 설정한 후, 본문에서는 경로를 빼고 다음과 같이 쓸 수 있는 것이다![The flower](flower.png)관련 설명은 Chirpy 블로그 튜토리얼 페이지에서 볼 수 있다. Writing a New Post" }, { "title": "[Google] Google Site Verification 및 Sitemap", "url": "/posts/google-site-verification/", "categories": "etc", "tags": "Blog", "date": "2022-02-12 00:00:00 +0900", "snippet": "Chirpy 테마의 _config.yml파일을 설정하다 보니 google_site_verification라는 항목이 있었다.웹 쪽은 php랑 asp 문법만 아는 원시인에게 또 처음 들어보는 용어가 튀어나와서, 오늘도 구글링을 해야 했다. https://support.google.com/webmasters/answer/9008080?hl=ko구글에서 검색엔진 최적화를 위해 사이트의 소유권을 확인하는 코드라는 모양이다.코드를 가져오는 방법은 다음 포스트를 참고했다. https://vine.co.kr/208HTML 태그를 선택하면 나오는 코드를 _config.yml의 해당 항목에 추가하면 된다.이 때 구글 서치 콘솔 쪽에서 ‘확인’을 누르면 등록된 코드를 검증하므로, 먼저 코드를 추가하고 push해서 서버에 반영한 후 확인 버튼을 눌러야 한다.구글 서치 콘솔에서는 사이트맵도 등록할 수 있고, chirpy 테마는 사이트맵도 자동생성하므로 하는 김에 등록하기로 했다.하지만…안 된다찾아보니 이 문제로 고통받는 사람이 한둘이 아닌지 관련글이 많았지만, 이것저것 다 따라해봐도 소용없었다. 사이트맵 파일 검증을 돌려봐도 정상이고, URL 검증도 통과되고.최대 2~3일까지 걸린다는 말이 있으니 일단 지켜봐야 할 것 같다." }, { "title": "[Blog] Chirpy 블로그에 favicon 설정하기", "url": "/posts/change-favicon/", "categories": "Jekyll", "tags": "Blog", "date": "2022-02-12 00:00:00 +0900", "snippet": "Chirpy 테마에 favicon을 설정하는 방법은 테마 자체 튜토리얼 페이지에 나와 있다. Customize the Favicon전체적으로 이걸 따라하면 되지만, 따라하던 중 몇 가지 문제가 있었다.첫째로, 내 로컬 프로젝트에는 assets 폴더가 없었다.파비콘 경로는 assets/img/favicons/인데 아예 해당 폴더 자체가 없는 것.정확히는 _site 폴더 안에 있지만, 이 폴더는 생성된 사이트가 저장되는 곳이지 소스, 그러니까 원본 파일이 있는 곳이 아니다. git에서도 ignore되어 있고, 원본 저장소에도 해당 폴더는 없다.추측이지만, Chirpy Starter를 사용한 게 문제가 아닌가 싶다.Chirpy 테마의 원본 저장소에는 assets 폴더가 있으므로, 이걸 fork하는 방식으로 설치했다면 없을 수가 없으니까. 이 경우 테마 내부의 라이브러리가 어디선가 디폴트 파일들을 가져와서 사이트를 빌드하는 것으로 추정된다.그래서 해결법을 찾다가, 그냥 원본을 다운로드받은 후 assets 폴더를 프로젝트에 수동으로 집어넣어보니 정상적으로 동작했다.경로는 그냥 루트 아래고, 원본 저장소의 폴더 구조를 참고하면 된다.두번째 문제는 원본의 사이즈였다.Chirpy 테마는 512x512짜리 이미지를 사용한다고 되어 있는데, 내가 쓰려고 한 이미지는 그보다 작았다.대체 512짜리 파비콘을 어디다 쓰는 건지는 모르겠지만 이 테마는 어쨌든 512를 쓰고, 파일이 없으면 빌드 단계에서 어디서 땡겨오기까지 한다.일단 이 부분의 해결법은 assets/img/favicons/site.webmanifest 파일을 수정하는 것이다.... &quot;icons&quot;: [ { &quot;src&quot;: &quot;{ favicon_path }/android-chrome-192x192.png&quot;, &quot;sizes&quot;: &quot;192x192&quot;, &quot;type&quot;: &quot;image/png&quot; }, { &quot;src&quot;: &quot;{ favicon_path }/android-chrome-384x384.png&quot;, &quot;sizes&quot;: &quot;384x384&quot;, &quot;type&quot;: &quot;image/png&quot; }],...원본은 이 부분에 512x512가 들어 있는데 자기 파일의 사이즈로 바꾸면 된다.{ favicon_path }의 중괄호는 정확하게는 두 개인데 블로그 테마 내에서 뭔가 오류로 인식하는지 중괄호 두 개를 쓰면 보이질 않는다. (마크다운 프리뷰에서는 정상으로 보임)이 문제는 해결법을 찾지 못해서 일단 그대로 둔다.일단 로컬/깃허브 양쪽 모두 정상으로 보이지만, 보통 사이트는 384나 512짜리 파비콘 자체를 쓰지 않을 테니 제대로 해결된 건지는 모르겠다. 내 경우 자동생성되는 512짜리 이미지가 여전히 사이트에 포함되어 있고, 이것도 해결법을 찾지 못하고 있다.가능하다면 그냥 512짜리 파비콘을 만드는 게 가장 깔끔할 것 같다." }, { "title": "[Jekyll] Windows 10 환경에서 Github 블로그 설치", "url": "/posts/install_github_blog_chirpy/", "categories": "Jekyll", "tags": "Blog, jekyll", "date": "2022-02-12 00:00:00 +0900", "snippet": "원래는 이 글이 먼저 올라왔어야 했는데, 쓰던 글을 옮기다가 날려먹어서 복구가 늦어졌다 OTLGithub 블로그는 일반적으로 생각하는 서비스형 블로그와는 기본 개념 자체가 다르다. 설치도 손이 많이 갈 뿐더러 ‘개발 환경’을 깔아야 하는 등 코딩을 모르는 사람이 하기에는 불편한 부분이 많이 있다.사실 설치 방법도 잘 정리된 글이 많지만, 그것들을 보고 따라하면서도 내 환경과 맞지 않아서 고생한 부분이 있었고, 그런 것들을 정리해두는 건 의미가 있을 것이다. 이걸 깔다가 이틀간 개고생한 게 억울해서라도 적어놔야겠다Github 블로그의 기본기념역시 잘 정리된 글이 많으므로, 간략하게만 정리한다. GitHub Pages 블로그 소개통상적인 서비스형 블로그는 유저가 글을 올리면 서버측에서 실시간으로 그 글을 블로그 사이트, 즉 html 형태로 출력해준다.이렇게 사용자의 입력에 반응하고 상호작용하는 사이트의 페이지를 동적 웹 페이지(Dynamic Web Page)라고 부른다. 여기에 쓰이는 게 php니 asp니 하는 것들이고.하지만 깃허브 블로그는 이 작업을 로컬에서 진행한다.글을 쓰고, 그것을 로컬에서 빌드해서 결과물인 html 페이지를 만든 후, 그 html 페이지를 서버에 업로드한다.이렇게 만들어진 html 페이지는 그냥 결과물을 출력할 뿐, 그 자체로는 사용자의 입력에 반응할 수 없다(Javascriprt 같은 건 동작하지만 이건 서버단에서 처리하는 게 아니라 이야기가 조금 다르다)이를 정적 웹 페이지(Static Web Page)라고 부른다.깃허브 블로그의 기본 개념은 로컬에서 빌드한 정적 웹페이지를 git으로 서버와 동기화시켜서 웹사이트를 서비스하는 것이다.어차피 git이 하는 역할이 그거니까 이걸 ftp처럼 업로드/동기화 툴로 사용해서 로컬에서 빌드한 웹페이지를 그냥 서버에 올린다. 서버는 복잡하게 php니 mysql이니 하는 걸 깔지 않아도 되므로 부담이 줄고, 이는 호스팅 비용의 절감으로 이어진다.콜롬부스도 달걀을 탁 치며 감탄할 발상의 전환이다. 대체 어떤 미치광이가 이런 생각을 해냈는지 모르겠다.분명히 프로그래머의 관점에서는 합리적이고 장점이 여러 가지 있는 아이디어다.하지만 이걸 프로그래머가 아닌 사람에게 어떻게 설명할지를 묻는다면, 솔직히 못하겠다.동적 웹사이트가 뭐 대단한 기술도 아니고 서비하는 업체도 넘쳐나는데, 그냥 골라 쓰면 되잖아? 왜 굳이 귀찮게 자기 PC에서 그 짓을 해야 하는가?프로그래머가 아닌 일반인은 그렇게 생각하는 게 정상이고, 그게 맞다. 이런 게 멋지다고 생각하는 프로그래머가 이상한 외계인이지.다시 말하지만 이건 프로그래머 관점에서만 멋져 보이는 발상이다. 그나마도 자기가 블로그를 세부적으로 커스터마이징할 게 아니면 ‘멋지다/쿨하다’ 외의 장점은 아무것도 없다.당연히, 프로그래머가 아닌 사람에게는 널린 좋은 블로그 서비스를 두고 깃허브 블로그를 골라서 얻는 장점은 아무것도 없고, 고생만 끝없이 늘어난다. 그러니까 괜히 나처럼 남들 한다고 따라하지 말자.로컬 개발 환경 설치깃허브 블로그는 Jekyll이라는 Ruby 언어 기반의 정적 웹사이트 생성기를 사용한다.이걸 로컬에 깔지 않고도 깃허브에서 지원하는 서비스만으로 블로그를 만들 수는 있지만, 그러면 테마(블로그 스킨)의 선택폭도 줄어들고 할 수 있는 일에도 제약이 꽤 생긴다.일단 깃허브 블로그를 쓰는 사람들이 다 개발자다보니, 로컬 개발 환경을 안 깔고 쓴다는 걸 애초에 전제하질 않는 것 같다.블로그 하나 만드는 데 개발환경 구축까지 하기 싫어서 우회 방법을 찾아봤지만, 최종 결론은 블로그 운영까지 감안하면 그냥 얌젼히 시키는 대로 다 깔아놓는 게 낫다는 것이었다.블로그 설치 방법에 대해서 참고한 것은 아래의 강좌들이다. [Github 블로그] 깃허브(Github) 블로그를 생성해 보자 GitHub Pages 블로그 준비하기대부분의 작업은 그냥 위 블로그 게시물을 따라하면 되고, 그 중 내가 다르게 처리한 것들만 정리한다. 깃허브 블로그를 위한 Repository를 생성 후 로컬에 가져오는(clone) 작업은 그냥 자기가 편한 방법으로 하면 된다. 내 경우 SourceTree를 사용하므로, 그냥 소스트리를 이용해 저장소를 가져왔다. 윈도우 환경에서 Ruby 설치는 어려울 게 없다. 그냥 https://rubyinstaller.org/downloads/에 들어가서 개발환경을 포함(With Devkit)이라고 적힌 리스트에서 추천 버전을 다운받으면 된다. 옆에 =&amp;gt;라고 표시된 게 추천 버전이다.설치는 ‘Add Ruby executables to your PATH’ 옵션이 체크되었는지만 확인하고(버전에 따라 다를 수 있지만, 내 경우는 디폴트로 체크되어 있었다) 그냥 Next 버튼을 연타하면 된다.블로그 테마 설치github 블로그는 일반적으로 jekyll 테마를 가져와서 사용한다. 백지에서부터 자기가 블로그 코드를 짤 수야 있겠지만 굳이 바퀴를 새로 발명하는 건 시간낭비다.블로그 설치 강좌를 찾아보면 minimal mistakes 테마를 많이 쓰는 것 같다.다만 내 경우는 커스터마이징에 공을 들일 시간도 능력도 없어서, 그냥 완성품으로 마음에 드는 디자인을 가진 Chirpy 테마를 골랐다.jekyll 테마는 실질적으로 코드 프로젝트기 때문에 케바케인 부분이 많은데, 그걸 모르고 괜히 남들 안 쓰는 테마 가져다 쓰는 바람에 꽤 고생을 했다.Chirpy 테마의 설치 방법은 아래 링크에 정리되어 있다. Getting Started내 경우는 Chirpy Starter를 이용해 설치했고, 이 경우 Ruby와 Jekyll가 설치되어 있다는 전제하에 절차는 간단하다. Chirpy Starter로 블로그 테마를 자기 github 블로그에 가져온 후 로컬에 clone한다. 커맨드 프롬포트(혹은 powershell 등)로 로컬 블로그 프로젝트 루트 폴더에 접속해 bundle이라고 입력한다.그렇게 하면 jekyll이 테마에 미리 설정되어 있는 라이브러리(Gem)들을 알아서 다운받아 추가한다. bundle exec jekyll s를 입력하면 로컬 서버가 실행되고 127.0.0.1:4000에서 볼 수 있다.이때 실행 후 커맨드 프롬포트 창은 닫지 않고 놔둬야 한다. 여기까지만 하면 일단 로컬에서 블로그 테마가 돌아가는 것은 확인할 수 있다.내 경우는 로컬에서 포스팅에 문제가 있어서 Synology NAS에 Jekyll을 설치해서 로컬 테스트 서버같은 느낌으로 쓰고 있다.테마 설정과 업로드테마의 기본적인 설정은 _config.yml파일에서 다룬다.설정하면서 이슈가 있었던 부분들은 별도의 포스팅으로 정리했다.일단 Windows 환경에서는 Getting Started 문서에 적힌 대로 커맨드 프롬포트상에서 다음을 입력해야 한다.bundle lock --add-platform x86_64-linux빼먹으면 깃허브에서 빌드가 에러난다.로컬에서 블로그가 제대로 동작하고 글쓰기까지 제대로 된다면 Gemfile.lock 파일이 생성되었는지 확인하고 commit한 후 깃허브에 push한다.그러면 테마에 설정되어 있는 Github Action이 자동으로 트리거되며 서버상에서 홈페이지를 빌드한다.깃허브 액션에 대해서는 다음 게시물 참고. Github Action 사용법 정리처음 푸시하면 서버도 라이브러리 설치하느라 몇 분 걸린다. 진행상황은 자기 저장소의 Actions 탭에서 볼 수 있다.여기서 작업의 성공/실패 여부와 로그도 볼 수 있으므로 오류가 발생할 경우 참고하면 된다.내 경우 플랫폼 추가 명령을 입력할 때 liunx를 linux로 잘못 쳐서 서버에서 에러가 나는 걸 못 찾아서 한 시간 넘게 고생했다. 멍청하면 몸이 고생이지…OTL액션이 완료되면 블로그를 서버에서 확인할 수 있다.설치할 때는 아무것도 몰라서 헤매느라 고생했는데, 정리하고 보니 별 거 없어 보인다. 역시 잘 모르면 몸이 고생이지 뭐." }, { "title": "[Jekyll] Synology Nas에서 jekyll 사용하기", "url": "/posts/install-jelyll-Synology-nas/", "categories": "Jekyll", "tags": "Blog, jekyll, Synology", "date": "2022-02-11 00:00:00 +0900", "snippet": "Github 블로그는 위지윅(WYSIWYG)에디터를 지원하지 않기 때문에 포스팅을 등록해야 실제 블로그에서 어떻게 보이는지를 알 수 있다.그럼 미리보기는 어떻게 하는가?일단 마크다운(markdown) 문법 자체는 미리보기를 지원해주는 에디터가 많이 있다. 내 경우는 Visual Studio Code를 이용하고 있다.VS Code에는 마크다운 미리보기를 지원하는 애드온(정확히는 extensions라고 부름)이 있는데, 2022년 2월 현재 사용하는 버전에는 자체적으로도 미리보기가 지원되는 것 같다.미리보기를 지원해주는 방식에 조금 차이가 있는 것 같아서 내 경우 둘을 번갈아 쓰고 있다.하지만 이건 어디까지나 ‘마크다운 문법’미리보기지, 블로그에서 이 글이 어떻게 보이는지를 정확히 알려주는 게 아니다.그럼 그래서 블로그 미리보기는 어떻게 하는가?로컬에 Jekyll 서버를 띄우고 거기서 보면 된다.Ruby와 Jekyll, 블로그 테마 등이 모두 설치되어 있다면 Windows PowerShell이나 Command Prompt에서 블로그 프로젝트의 루트 폴더로 가서 bundle exec jekyll serve라고 치면 로컬 서버가 시작되고, cmd를 켜놓은 상태로 http://127.0.0.1:4000에서 내 블로그를 볼 수 있다.…매우 귀찮다.실행이야 배치파일을 만들든 뭐든 하면 되겠지만, 로컬 서버를 매번 띄우는 것 자체부터가 귀찮은 일이다.그리고 결정적으로, 내가 사용하는 Chirpy 테마가 문제를 일으켰다.블로그 설치까지는 되는데, 포스트를 올리면 계속해서 로컬에서 에러를 내는 것이었다.정작 깃허브에 올리면 정상 동작하는데, 로컬에서만 에러가 발생하고 원인도 알 수가 없었다.내가 뭐 Ruby를 알아서 디버깅할 수도 없고, 로컬에서만 에러가 난다는 점과 에러 로그로 볼 때 windows 환경에서 파일명이나 경로를 읽어오는 과정에서 뭔가 꼬였을 거라는 추측만 할 수 있었다.그럼 윈도우 환경인 로컬이 아닌 다른 곳에 jekyll 서버를 띄우면?아예 상시로 돌아가는 자체 서버가 하나 있는 셈이니 편하지 않을까?마침 쓰고 있는 Synology Nas에 이걸 깔 수 있나 하고 봤더니, 역시나 가능했다. Synology nas에서 docker를 이용한 jekyll 사용하기설치법은 이 포스팅을 보고 따라했고, 여기서 차이가 있는 부분만 정리한다.1. 설치 폴더 생성.먼저, NAS 공유폴더 내에 블로그를 둘 폴더를 생성해야 한다.위 포스팅에서는 jekyll_home로 했는데, 이름이나 위치는 어디든 상관없다.jekyll_home/vendor/bundle는 라이브러리 등이 설치되는 경로 같은데, 역시 이름이나 위치는 상관없다. 블로그 홈 폴더 아래가 아니라도 된다.2. Docker에서 Jekyll 설치위의 강좌를 순서대로 따라하면 맨 처음 커맨드라인 명령어를 실행하는 단계에서 jekyll이 설치되어 버린다. 내 경우는 결과적으로 버전이 다른 jekyll 두 개가 설치되어 버렸다.위 포스팅에서 설치하는 jekyll의 버전은 3.8.6인데 2022년 2월 현재 jekyll의 버전은 그보다 높으므로 일단 패스하고 Docker에서 설치부터 진행한다.이미지 다운로드나 컨테이너 생성 부분은 위 포스팅을 따라가면 된다. 다만 볼륨 추가 부분에서 설치 폴더를 다르게 지정했다면, 지정해놓은 경로를 /usr/local/bundle와 /srv/jekyll의 마운트 경로에 입력해야 한다.그 다음 포트 설정에서 로컬 포트를 지정해준다.4000번이 실행된 사이트에 접속할 때 사용하는 포트다. 그리고 마지막 탭인 환경 부분에서 아래와 같이 설정한다.TZ는 타임존(Timezone) 설정이다. 설명은 아래 게시물 참고. [github blog] 한국 시간대로 time zone 세팅하기그리고 맨 아래의 명령에는 jekyll serve나 jekyll s를 넣어야 한다.참고한 포스팅에서는 jekyll build -w로 되어 있는데, 이렇게 하면 사이트가 빌드만 되고 서버가 실행되지 않는다.문제는 시놀로지 NAS의 도커 설정에는 이 명령 부분을 바꾸는 곳이 없어서, 한번 설치하고 나면 수정할 수가 없다. 내가 못 찾은 걸수도 있지만, 나는 결국 이것 때문에 jekyll을 한번 지우고 새로 설치해야 했다.경로 설정이 되어 있고 해당 경로에 블로그 테마가 설치되어 있었다면 컨테이너가 실행되면서 바로 블로그를 빌드한다.하지만 블로그 테마에 따라 젬(Gem; Ruby의 라이브러리)을 다운받거나 해야 하는 경우가 있을 수 있다. 이건 케바케고 나도 잘 모르는 영역이지만, 어쨌든 빌드했는데 Gemfile 어쩌고 하면서 실행이 안 된다면 다음 명령을 실행해보자.docker run --rm \\ --volume=&quot;/volume1/[마운트 경로]:/srv/jekyll&quot; \\ --volume=&quot;/volume1/[마운트 경로]:/usr/local/bundle&quot; \\ -it jekyll/jekyll:latest \\ bundle update먼저 시놀로지 NAS의 ssh 접속을 활성화하고, ssh로 접속한 후 거기서 명령을 붙여넣으면 된다.다만 docker의 실행권한이 없을 수 있으므로, 권한이 없다고 나오면 관리자 계정으로 접속해서 sudo -i를 쳐서 슈퍼유저 권한을 가져와야 한다. Synology NAS에 SSH 서버 활성화하고 접속하는 방법3. 실행브라우저에서 NAS에 4000번 포트로 접속해보면 블로그가 뜨는 것을 확인할 수 있다.도커 컨테이너의 로그나 터미널 출력을 확인하면 정상동작하는지, 어떤 에러가 뜨는지 볼 수 있다.위는 정상적으로 서버가 실행되었을 때의 로그다.솔직히 리눅스나 루비나 docker는 잘 몰라서 그냥 장님 코끼리 만지듯 강좌 보고 따라한 거고, 그래서 해놓고도 잘 모르는 부분이 많다. 여기까지 공부할 시간도 없고.그래도 기록을 남겨두면 나중에 까먹었을 때 도움은 되겠지." }, { "title": "[Diary] Github 블로그를 선택한 이유와 감상", "url": "/posts/why-i-choice-github-blog/", "categories": "Diary", "tags": "Blog, jekyll", "date": "2022-02-09 00:00:00 +0900", "snippet": "Github 블로그를 선택한 이유기술 블로그(라고 하기도 민망하지만)를 만들기로 결정하고 어떤 플랫폼을 쓸지 꽤 고민했다.나랑 같은 고민을 한 사람이 꽤 많았는지, 구글링을 해보면 비교글도 많고, 플랫폼을 고르는 데 너무 오래 고민하지 마라라는 조언도 있었다.그래, 사람 생각하는 게 다 비슷한 법이지… (먼산)기술 블로그 플랫폼별 특징대충 한나절을 구글신께 기도한 결과 대략적으로 알아낸 각 기술 블로그 플랫폼의 대략적인 특색은 다음과 같다. 네이버 블로그 : 기술블로그로는 고려대상이 아님. 티스토리(Tistory) : 무난. 많이 씀. 코드블록 지원은 호불호가 갈리지만 쓸만함. 미디엄(Medium) : 다 좋은데 한글폰트가 너무 구리고 이 문제를 해결하는 것이 불가능. 브런치(Brunch) : 개발블로그에는 적합하지 않고 폐쇄형임. 벨로그(Velog) : 개발블로그 특화. 하지만 마이너. 워드프레스(Wordpress) : 기능은 많지만 서버 직접 구축하거나 호스팅해야 함. 노션(Notion) : 노션 그거 협업툴 아님? 블로그 용도로는 호불호 갈리는 듯. 깃허브(github) : 어려움.처음에 고려했던 것은 무난무난한 티스토리였다.이 바닥 트렌드와 너무 오래 떨어져 있어서 거의 IT 원시인 상태로 우가우가하며 하나씩 공부하는 중인 만큼 무난하고 편한 게 좋다고 생각했다.티스토리를 선택하지 않은 이유하지만 생각이 바뀐 건 이 게시물을 찾으면서였다. 블로그 해킹으로 인한 접근 제한 막는 유일한 방법어떤 이유로든 블로그에 문제가 생기면 다음 운영측이 임의로 블로그를 폐쇄할 수 있고, 한번 폐쇄되면 안 풀어준다.정확히는 대부분의 대형 플랫폼 업체가 다 그렇듯 개인의 문의사항이나 항의는 들은 척도 안 하고 씹거나 매크로 답변만 돌아오는 것이다.특히나 다음 고객센터의 안 듣고 안 보고 정보를 주지 않는 대응은 나무위키에 기록되어 있을 만큼 악명높은 모양이다.수많은 개발자들이 티스토리에 기술 블로그를 올리고 있는 만큼 현실적으로는 가능성이 낮은 일이겠지만, 만의 하나라도 내 블로그 전체가 한 순간에 날아가고 복구할 수도 없게 될 수 있다는 것은 매우 큰 감점요인이다.심지어 티스토리는 자체 백업 기능도 없다. 외부 툴은 있지만 완벽하다고는 하기 어렵다.벨로그를 선택하지 않은 이유그 다음으로 고려했던 벨로그도 같은 이유로 탈락.벨로그는 velopert라는 개발자 한 명이 만든 블로그 플랫폼이고, 이는 언제든 개인 사정으로 서비스가 중단될 가능성이 있다는 뜻이다.게다가 벨로그는 티스토리같은 위지윅(WYSIWYG) 에디터가 아니라 마크다운(Markdown) 문법을 사용한다.그럼 깃허브 블로그랑 사실상 차이도 없지 않나?최종 선택그래서 최종적으로 고르게 된 것이 깃허브 블로그였다.이쪽을 고르게 된 이유는 다음과 같다. 개념은 그다지 어렵지 않다. Git에 대한 기본개념과 약간의 프로그래밍 지식만 있으면 블로그를 만들 수 있다. 아마도. 물론 여기서 어렵지 않다는 어디까지나 개발자 기준이다. 깃허브 블로그를 고려하는 사람이 Git에 대한 기본적 이해가 없다는 건 애초에 말이 안 되니까. 마찬가지로 마크다운과 HTML도 통상적인 개발자에게는 어려운 개념이 아니다. 내가 아무리 IT 원시인이 됐다지만 이건 수십 년 전부터 있었던 개념이잖아? 블로그 원본이 로컬에 저장된다. 설령 깃허브 사이트가 사라지더라도 내가 원본을 보존하고 있는 이상 글은 보존되며, 사이트도 아주 쉽게 복구할 수 있다. 요즘 개발블로그의 대세처럼 보인다.애초에 최신 개발 트렌드를 공부하고 따라잡으려고 시작한 일인 만큼, 기왕 할 거면 가장 최신의 트렌드에 맞춰야하지 않을까?그런 고민 끝에 최종적으로 깃허브를 고르게 되었다.Github 블로그 사용감상불편하고 공부할 게 많다.시밤 이 불편한 짓을 전 세계 수백만의 개발자들이 하고 있다고? 이게 요즘 인싸 프로그래머들의 트렌드라고? 제정신들인가?깃허브 블로그를 세팅하는 내내 든 생각이었다.일단 설치그다지 어렵지 않을 거라는 내 예상은 반만 맞고 반은 틀렸다.아니 정확히는 30%쯤 맞고 70%쯤 틀렸다고 해야 할까.처음에 나는 이 글을 보고 깃허브 블로그를 별도의 로컬 작업 없이 깃허브 서비스만으로 세팅할 수 있다고 생각했다. Github 블로그 시작하는 방법(로컬 설치 없이 쉽게 만들기)깃허브 블로그가 돌아가는 구조와 개념, jekyll 등에 대해서는 별도의 포스트로 작성할 예정이지만, 결론만 말하자면 이 글의 내용은 맞다고도 틀리다고도 할 수 있다.깃허브는 자체적으로 jekyll 빌드를 지원하므로, 이론상으로는 로컬에서 뭔가 설치할 필요 없이 블로그를 만들 수 있다.하지만, 상당수의 깃허브 블로그 스킨(테마)는 그렇지 않다.깃허브 블로그 테마는 일종의 코드로 짜여진 프로젝트이고, 당연히 테마마다 개발환경이나 설정이 조금씩 다르다.깃허브가 jekyll을 자체지원하기 전부터 개발되어 왔거나, 그냥 로컬에서 빌드하는 걸 전제로 설게된 테마들은 설정 자체를 일단 로컬에서 해야 올릴 수 있도록 되어 있는 것들이 있다.그리고 운 나쁘게, 내가 선택한 이 블로그 테마인 Chirpy도 그런 케이스였다.이 블로그 테마는 일단 로컬에서 한 번 빌드를 해서 Gemfile을 생성한 후에 깃허브에 올려야 정상 동작한다. 적어도 설치 매뉴얼에 따르면 그렇다.이 과정을 패스하는 방법이 있을지도 모르지만 난 그 방법을 찾을 만큼 Ruby나 Jekyll을 잘 알지 못한다.그러니까, 고작 블로그 하나 만들려고 다른 용도로는 쓸 일도 없는 Ruby랑 jekyll 개발환경을 깔고 빌드 세팅을 하라고?내가 생각했던 깃허브 블로그의 개설 난이도는 딱 저 위에 링크한, 로컬 설치 없이 만드는 수준이었다. 이건 예상범위 밖이다. 제네바 협정 위반이다.그럼 테마를 바꾸면 되지 않나?그런 생각으로 쭉 찾아봤지만, 로컬 빌드가 필요없다고 확신할 수 있는 테마 중에는 마음에 드는 게 없었다.그럼 테마를 그냥 내가 커스터마이징하면?나는 CSS나 Ruby 전문가가 아니다. 이쪽은 정말 기본 개념밖에 모른다.물론 그걸로도 어찌어찌 할 수는 있겠지만, 그 과정에서 얼마나 많은 시행착오를 거치고 시간을 얼마나 쓸지 상상하는 것만으로도 대략 정신이 멍해진다.그렇게 몇 시간을 고민한 끝에, 결국 나는 뇌를 비우고 무지성 따라가기를 선택했고, 테마에서 시키는 대로 루비랑 자칼을 깔고…블로그 하나 개설하기 위해 거의 1박 2일을 씨름해야 했다.포스팅개설부터가 이 난리였지만, 포스팅도 생각 이상으로 불편하다.마크다운 문법이 익숙해지면 크게 불편하진 않지만, 그와 별개로 문제가 한둘이 아니다.일단 위지윅 지원이 없다.즉, 내가 쓰고 있는 글이 실제 블로그에서 어떻게 보일지 미리보기가 실시간으로 되지 않는다.마크다운 문법 자체는 미리보기가 되지만, 그게 블로그 내에서 어떻게 보일지는 또 다른 문제니까.내가 구글링해서 찾아낸 이 문제의 해결법은, 로컬에서 jekyll 서버를 띄워서 그걸로 미리보기를 하는 것이다. [Github 블로그] 블로그 포스팅하는 방법딱 봐도 편리함과는 거리가 멀어 보이지 않는가?그리고 포스트에 이미지를 추가하는 것도 불편하다.그냥 버튼 한 번 누르고 사진 드래그하면 이미지가 포스팅에 추가되는 기존 서비스형 블로그를 생각하면 안 된다.깃허브 블로그에 이미지를 추가하려면 해당 이미지를 어디엔가 업로드한 후, 링크를 따와서 직접 링크 주소를 붙여넣어야 한다.기술 블로그야 이미지를 그리 많이 안 쓰니까 감수할 수 있겠지만, 짤이나 이미지를 많이 올리는 사람이라면 상당히 불편할 것이다.그 외에도 사소한 불편함은 많고, 글을 쓰는 지금도 실시간으로 늘어나고 있다.그래서 해법은?해법은 반드시 존재한다. 어딘가에.프로그래머라는 인종은 근본적으로 불편을 견디며 사는 자들이 아니다.노가다? 자동화해야지! 손이 많이 가? 매크로나 스크립트로 해결하면 되지! 프로그래머의 사고방식이란 보통 이렇다.깃허브 블로그를 수많은 개발자들이 쓰고 있는 이상, 이 불편함의 대부분을 해결하거나 자동화하는 방법은 어딘가에는 있을 것이다.문제는 그 방법을 다 찾아서 익히고, 모든 코딩이 다 그렇듯 일단 자기 개발환경에 맞춰 세팅해야 한다는 것이다.즉, 깃허브 블로그를 편하게 쓰려면, 그러기 위한 환경을 자기 스타일이나 환경에 맞춰서 세팅하는 과정이 필요하다. 결론블로그 개설 자체는 크게 어렵지는 않다. 그냥 기본적인 개념만 알고, 개설 방법이 잘 나와 있는 튜토리얼을 찾아 따라하면 된다.깃허브 블로그가 가장 어려운 부분은 설치 자체가 아니라, 설치 후에 자기가 편리하게 쓰기 위한 환경을 세팅하는 과정이다. 이 부분만은 개발자 개개인마다 환경이나 취향이 다르기 때문에 그냥 남의 것을 가져다 쓰기도 어렵다.이게 내가 2박 3일동안 블로그 하나 개설하겠다고 온갖 삽질을 하면서 내린 결론이다.앞으로 계속 블로그를 세팅하면서 관련 정보나 내 세팅 방법을 포스팅할 생각이다.다만 이걸 남에게 추천할 수 있느냐 하면, 솔직히 티스토리나 벨로그를 추천하는 게 무난하고 욕 안 먹는 방법이 아닐까." }, { "title": "[Diary] 블로그 시작", "url": "/posts/first_post/", "categories": "Diary", "tags": "Blog, jekyll", "date": "2022-02-09 00:00:00 +0900", "snippet": "본격적으로 공부를 다시 하려고 마음먹으면서 블로그를 시작하기로 했다.인터넷에는 기술 블로그가 어쩌고 하는 뭔가 있어 보이는 글들이 많지만, 개발자가 개인 레벨에서 블로그를 하는 가장 큰 이유는 공부하면서 알게 된 것들을 적어두는 용도라고 생각한다.배우거나 찾은 것들을 정리해두면 나중에 확인하기 쉽기도 하지만, ‘정리한다’라는 행위 자체가 복습의 역할을 하고 공부에 도움이 된다.그리고 문제를 정리하는 과정에서 해결법을 찾을 수도 있다. 고무 오리 디버깅은 의외로 효율적이다.하지만 워낙 오랫동안 최신 기술이나 트렌드와 떨어져 살았다 보니, 뭔가 하려고 할 때마다 마주치는 것들이 모두 새 기술이고 새 개념이다. 완전히 원시인이 된 기분이다.당장 이 블로그만 봐도 그렇다.세상에 Ruby 기반 스크립트로 로컬에서 블로그 스크립트를 빌드해서 staitc HTML로 만든 후, git을 FTP처럼 써서 올린다고?이런 미친 프로그래머나 할 법한 발상이 대세라고? 요즘 인싸 프로그래머들은 이걸로 블로깅을 한다고?이 첫 포스팅을 올리기 위해 한 삽질들만 모아도 강좌글을 하나 쓸 수 있을 판이다.(그리고 억울해서라도 하나 쓸 예정이다)그리고 본격적으로 공부하려는 쪽이 어떨지는… 요 며칠간 대충 들여다본 것만으로도 끔찍할 정도다. 현대에 뚝 떨어진 원시인이 이럴까 싶다.유니티와 AI쪽 기술 트렌드를 언제 대충이나마 따라갈 수 있을지 모르겠다.뭐, 해 봐야지." }, { "title": "C#에서 멀티스레드에 안전한 구조 설계 (3)", "url": "/posts/multithread_safe_problem_3/", "categories": "C&#35;", "tags": "C&#35;", "date": "2013-03-25 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.앞서 올린 게시물 링크 C#에서 멀티스레드에 안전한 구조 설계(1) C#에서 멀티스레드에 안전한 구조 설계(2)이전글에서 설명한 안습한 결론에 좌절한 후, 좀 더 빠른 lock-free 구조체가 없을까 하고 뒤지던 도중 ConcurrentQueue라는 걸 발견했습니다..net 4 이후 버전에서만 동작하고, 멀티스레드에 대해 안전하다고 하는군요.설명은 아래 위치에서 볼 수 있습니다.http://msdn.microsoft.com/ko-kr/library/dd267265(v=vs.100).aspxInterlocked도 그렇고, C#은 역시 그냥 만들어 놓은거 가져다 쓰는게 최고인 언어인지라 그대로 적용해 보았습니다.public void request2(){ queryQueue2.Enqueue(1);}public void update2(){ int t; while (!isEnd || !queryQueue2.IsEmpty) { if(queryQueue2.TryDequeue(out t)) m += t; }}그리고 대망의 실행 결과…테스트5가 ConcurrectQueue를 쓴 결과입니다. 1이 그냥 큐에 락 걸어서 돌린 거고 2는 공유 객체(변수 m) 자체에 락을 걸고 큐를 아예 쓰지 않은 경우.이것저것 다른 프로그램 띄워놓고 돌린거라 오차가 꽤 크지만, 어쨌든 성능이 확 좋아진 건 확실하군요. 실제 게임 서버 같은 곳에서는 update()에서 처리할 것도 많고 락 걸어야 하는 범위도 넓다는 걸 생각하면 실용성을 생각해도 될 만한 성능인 것 같습니다.결론역시 C#은 있는거 가져다 쓰라고 만든 언어입니다…" }, { "title": "C#에서 멀티스레드에 안전한 구조 설계 (2)", "url": "/posts/multithread_safe_problem_2/", "categories": "C&#35;", "tags": "C&#35;", "date": "2013-03-24 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.앞서 올린 게시물 링크 C#에서 멀티스레드에 안전한 구조 설계(1) Lock과 Interlocked.increment의 속도 차이사실 결론을 보자면 제목낚시글에 가깝습니다만…이벤트가 멀티스레드상에서 안전하지 않다는 걸 확인했기 때문에, 안전을 보장하기 위한 방법을 생각해 보았습니다.제가 생각한 방법은, 외부에서 들어오는 모든 요청을 queue에 저장한 후, 클래스 내부에서 루프를 돌면서 큐에 들어온 요청을 읽어들여 처리하는 것이었습니다. 이렇게 하면 외부 스레드에서 직접 클래스 내부 변수를 건드리는 것이 아니기 때문에 논리적으로는 안전해집니다.public void setEvent(threadfunc1 t1){ // 이벤트 핸들러 설정. t1.updateEvent += new updatefunc(request);}public void request(){ lock (queryQueue) { queryQueue.Enqueue(1); }}void update(){ int t; while (!isEnd || queryQueue.Count != 0) { lock (queryQueue) { if (queryQueue.Count &amp;lt; 1) continue; t = queryQueue.Dequeue(); } m += t; }}위와 같은 코드를 작성한 후, 외부 쓰레드에서 이벤트로 request()를 등록합니다.외부 스레드들이 루프를 돌며 request()를 계속 호출하고, update()도 별도의 스레드에서 무한루프를 돌며 큐에 값이 있으면 읽어들어 업데이트합니다. 이 경우 변수 m 자체는 update() 한 곳에서만 건드리므로 lock이 필요없어집니다.테스트 코드는 다음과 같습니다.private void button5_Click(object sender, EventArgs e){ test1 t1 = new test1(); threadfunc1 tf1 = new threadfunc1(); threadfunc1 tf2 = new threadfunc1(); Stopwatch sw = new Stopwatch(); // 이벤트 핸들러 등록. t1.setEvent(tf1); t1.setEvent(tf2); Thread counter1 = new Thread(new ThreadStart(tf1.update1)); Thread counter2 = new Thread(new ThreadStart(tf2.update1)); Thread updater = new Thread(new ThreadStart(t1.update)); msgTextBox.AppendText(&quot;테스트 1 시작\\n&quot;); sw.Start(); // 시간체크 시작. counter1.Start(); counter2.Start(); updater.Start(); // 스레드 종료까지 대기. counter1.Join(); counter2.Join(); t1.isEnd = true; updater.Join(); sw.Stop(); msgTextBox.AppendText(&quot;테스트 1 결과 : &quot; + t1.GetResult() + &quot;\\n&quot;); msgTextBox.AppendText(&quot;실행시간 : &quot; + sw.ElapsedMilliseconds.ToString() + &quot;ms\\n&quot;);}구조는 그럴듯합니다만…이 경우 결국 request를 저장하는 큐에 lock을 걸어야 하기 때문에, 배보다 배꼽이 더 커지는 사태가 발생합니다 -_-; 게다가 업데이트 스레드 자체도 오버헤드가 걸리기 때문에 성능은 더더욱 나락으로…게다가 더 골때리는건, lock-free queue 소스를 구해서 적용해본 결과 오히려 더 느려지는 결과가 나왔다는 점입니다.순서대로 lock-free queue를 쓴 경우, 그냥 큐에 lock을 건 경우, 변수 m을 그냥 lock()으로 감싼 경우, interlocked.increment를 이용한 경우, 마지막으로 락을 걸지 않은 경우입니다. 테스트1이 두번 나온 건 복붙하고 글자 고치는걸 까먹어서…인터넷상에서 구한 lock-free queue가 이런 케이스에서 성능이 안 나올 수 밖에 없는 구조인지(말이 좋아 락프리지 내부적으로는 결국 락을 거는 곳이 있는데, 그 조건에 많이 걸릴 경우) 아니면 제가 코드를 잘못 짠 건지…. 왠지 후자의 가능성이 걸립니다 -_-;실제 게임 서버같은 경우 update()에서 처리하는 일이 많을 테니 조금 달라질지 모르겠지만, 이대로면 그냥 노멀하게 객체에 락 걸어가며 쓰는 게 성능상으로는 더 나을 것 같네요.뭔가 이 구조를 성능저하 없이 구현할 수 있는 다른 방법이 없을까요… 이벤트가 멀티스레드에 안전하지 않으니 결국 풀링을 수동으로 루프 돌려서 할 수 밖에 없다는 게 참…" }, { "title": "C#에서 멀티스레드에 안전한 구조 설계 (1)", "url": "/posts/multithread_safe_problem_1/", "categories": "C&#35;", "tags": "C&#35;", "date": "2013-03-24 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.최근에 C#으로 서버를 짜보고 있는지라 멀티스레드 안전성에 대해 이것저것 찾아봤습니다. 일단 당연하다면 당연한 말이지만, C# event 호출은 스레드와 동일하게 취급되므로 그 자체로는 멀티스레드 안전성을 보장하지 않습니다.namespace ThreadTest{ public delegate void updatefunc(); public class test1 { int m; public Queue&amp;lt;int&amp;gt; threadInfoQueue; public test1() { m = 0; threadInfoQueue = new Queue&amp;lt;int&amp;gt;(); // 생성자가 실행된 스레드의 ID를 로그에 기록합니다. Thread th = Thread.CurrentThread; threadInfoQueue.Enqueue(th.GetHashCode()); } public void setEvent(threadfunc1 t1) { // 이벤트 핸들러 설정. t1.updateEvent += new updatefunc(update); } public void update() { // update()가 실행된 스레드의 ID를 로그에 기록합니다. Enqueue는 멀티스레드에 대해 안전하지 않으므로 lock 필요. lock (threadInfoQueue) { Thread th = Thread.CurrentThread; threadInfoQueue.Enqueue(th.GetHashCode()); } m++; } public int GetResult() { return m; } } public class threadfunc1 { public event updatefunc updateEvent; public void update1() { updatefunc handler = updateEvent; if (handler == null) return; // 등록된 이벤트 처리 함수(test1.update())를 실행시킨다. for (int i = 0; i &amp;lt; 5; i++) handler(); } } public partial class Form1 : Form { public Form1() { InitializeComponent(); test1 t1 = new test1(); threadfunc1 tf1 = new threadfunc1(); threadfunc1 tf2 = new threadfunc1(); // 이벤트 핸들러 등록. t1.setEvent(tf1); t1.setEvent(tf2); Thread counter1 = new Thread(new ThreadStart(tf1.update1)); Thread counter2 = new Thread(new ThreadStart(tf2.update1)); // 두 스레드의 ID 출력. msgTextBox.AppendText(&quot;Counter 1 Thread ID : &quot; + counter1.GetHashCode() + &quot;\\n&quot;); msgTextBox.AppendText(&quot;Counter 2 Thread ID : &quot; + counter2.GetHashCode() + &quot;\\n&quot;); counter1.Start(); counter2.Start(); // 스레드 종료까지 대기. counter1.Join(); counter2.Join(); msgTextBox.AppendText(&quot;결과 : &quot; + t1.GetResult() + &quot;\\n&quot;); // 로그 출력. foreach (int tcode in t1.threadInfoQueue) { msgTextBox.AppendText(&quot;Thread ID : &quot; + tcode + &quot;\\n&quot;); } } }}간단한 테스트 예제입니다. test1.update()에서 멤버변수를 업데이트하고, 두 개의 다른 스레드에서 update()를 이벤트로 호출합니다. 이 경우 update()는 test1 객체가 생성된 스레드가 아니라, 이벤트를 호출한 스레드에서 실행됩니다.아래는 실행 결과입니다.보시는 바와 같이 test1의 생성자는 Thread ID 1에서 호출되지만, update()는 3번과 4번 스레드(즉 update()를 호출하는 두 스레드)에서 실행됨을 알 수 있습니다. 이렇게 되면 그냥 평범한 멀티스레드 구조가 되어, 안전성은 보장되지 않습니다.쓸데없이 긴 글이지만 요점은 간단합니다.‘이벤트는 그냥 멀티스레드 구조입니다’뭐 이벤트 자체가 내부적으로 멀티스레드로 구현되어 있다고 하니 당연하다면 당연한 일입니다.단지 저는 이 당연한 사실을 구글에서도 명확하게 찾을 수가 없어서 직접 테스트 코드를 돌려봐야 했다는 거… ㅠㅜ2편에서 이어집니다 ( ..)" }, { "title": "Lock과 Interlocked.increment의 속도 차이", "url": "/posts/interlocked-increment/", "categories": "C&#35;", "tags": "C&#35;", "date": "2013-03-24 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.멀티스레드 문제 때문에 이것저것 뒤지던 도중 InterLocked를 써보게 되었는데, 내부적으로 결국 임계영역을 쓰는 방식이라 그냥 lock 거는거랑 별 차이가 없을 거라 생각했습니다. 하지만 막상 테스트해보니 꽤 차이게 크게 나는군요.아래 게시물의 이벤트 호출 방식에서 update()를 다음과 같이 바꾼 버전입니다.(뭐 버튼같은것도 추가했지만 전체 소스는 필요없겠죠)public void directUpdate1(){ lock (lockObject) { m++; }}public void directUpdate2(){ Interlocked.Increment(ref m);}테스트2가 directUpdate1()을 호출한 경우고, 테스트3이 directUpdate2() 호출입니다.보시다시피 속도가 4배 가까이 차이납니다.x86 릴리즈 빌드에 .net 4버전, 테스트 PC는 듀얼코어입니다. (스레드도 2개)다른 곳에서 찾아본 바로는 30%정도의 속도 향상이 있다고 하는데, 이렇게 차이가 크게 나는 이유가 뭔지 모르겠네요. .net 버전이 올라가면서 내부적으로 뭔가 lock-free 알고리즘을 써서 최적화된 건지…어쨌든 이정도면 가능한한 interlocked를 쓰는 게 좋을 것 같습니다. (이게 특이한 케이스라고 해도 보통 30%면 그게 어디야…)" }, { "title": "C++ ADO에서 GetCollect()의 인수로 칼럼 번호를 넣을 때 유의사항", "url": "/posts/ado_getcollect/", "categories": "C++", "tags": "C++", "date": "2010-04-15 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.C++ ADO 라이브러리 사용시, 다음과 같은 코드는 에러를 낸다._RecordsetPtr rs;..rs-&amp;gt;GetCollect(0);..결과 레코드셋에 값이 있어도 에러가 나는데, 이를 해결하는 방법은 다음과 같다.rs-&amp;gt;GetCollect((short)0);아무래도 GetCollect()의 인수로 칼럼 번호를 넣을 때는 short형이 아니면 안 되는 듯." }, { "title": "C++ ADO에서 Connection string 주의점.", "url": "/posts/ado_connectstring/", "categories": "C++", "tags": "C++", "date": "2010-04-15 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.ADO.NET에서 MSSQL에 접속시 Connection String은 다음과 같다. Data Source=[address];Initial Catalog=[DB name];User ID=[ID];Password=[PASSWD]C++에서 쓰는 ADO에서는 약간 다르다. provider=SQLOLEDB.1;Data Source=[address];Initial Catalog=[DB name];User ID=[ID];Password=[PASSWD]C++에서는 앞에 provider=SQLOLEDB.1; 가 포함되어야 한다.이걸 몰라서(정확히는 까먹어서) 세 시간정도 삽질했음 ㅁㄴㄹㅇ…참고로 빼먹었을 때 나타나는 메세지는 다음과 같다. Error Code: 80004005Description: [Microsoft][ODBC 드라이버 관리자] 데이터 원본 이름이 없고 기본 드라이버를 지정하지 않았습니다." }, { "title": "CLI에서 비관리 포인터가 멋대로 사라지는 문제", "url": "/posts/non-managed-point/", "categories": "C&#35;", "tags": "C&#35;", "date": "2010-01-08 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.C++/CLI 코드public ref class Class1{ private: // TODO: 여기에 이 클래스에 대한 메서드를 추가합니다. int* test; public: Class1() { Class1(0); } Class1(int a) { test = new int[10]; }};C# 코드public partial class Form1 : Form{ public Form1() { InitializeComponent(); Class1 c1 = new Class1(); }}위와 같은 코드를 짠 후 C#에서 CLI의 Class1() 생성자를 호출하면, Class(int a) 생성자를 호출한 후 할당된 test 변수의 값이 사라져버린다.즉 Class1() 생성자가 내부적으로 Class(int a) 생성자를 호출해 test 변수에 배열을 할당하는데, 이 할당된 배열이 Class(int a) 함수에서 빠져나가는 순간 해제되어버린다는 것.아무래도 GC가 멋대로 포인터에 할당된 메모리를 정리해버리는 것 같은데(분명히 비관리 포인터인데도 그렇다. 관리되는 코드 내에서는 비관리 포인터도 GC가 관리하는 듯 하다.) 어떻게 해야 비관리 포인터의 값이 멋대로 사라지는 걸 막을 수 있는지 모르겠다 -_-;;(일단은 생성자 연쇄호출을 쓰지 않으면 해제가 일어나진 않는다)" }, { "title": "C# ComboBox의 SelectedValue DB 없이 사용하는 법.", "url": "/posts/combobox_nodb/", "categories": "C&#35;", "tags": "C&#35;", "date": "2010-01-08 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.C# ComboBox에는 텍스트-값 쌍을 넣어서 아이템 선택시 폼에는 텍스트가 뜨고, SelectedValue 멤버변수에는 선택된 아이템의 값이 들어가도록 할 수 있다. 그런데 정작 이걸 입력하는 방법이 DataSet같은 걸 DataSouece에 바인딩하는 법밖에 없어서, 일반적으로는 DB에서 가져온 테이블을 바인딩하거나 할 때만 사용이 가능하다.이 기능을 코드에서 직접 처리할 수 있는 클래스를 제작해 보았다.public class ComboBoxItemSet{ // 텍스트-값 쌍을 나타내는 내부 클래스. class TextValuePair { string m_text; object m_value; public string Text { get { return m_text; } } public object Value { get { return m_value; } } public TextValuePair(string text, object value) { m_text = text; m_value = value; } public override string ToString() { return m_value.ToString(); } } ArrayList list = new ArrayList(); public void Add(string text, object value) { list.Add( new TextValuePair(text, value) ); } public void Bind(System.Windows.Forms.ComboBox comboBox) { if (list.Count &amp;lt; 1) return; // 값이 없으면 바인딩할 필요가 없다. comboBox.DataSource = list; comboBox.DisplayMember = &quot;Text&quot;; comboBox.ValueMember = &quot;Value&quot;; }}사용은 Add 함수로 텍스트-값 쌍을 입력한 후, Bind 함수로 연결할 콤보박스 컨트롤을 지정해주면 된다." }, { "title": "Ogre3D MovableText 관련해서 원인불명의 삽질", "url": "/posts/ogre3d_movabletext/", "categories": "C++", "tags": "C++, Ogre3D", "date": "2009-05-01 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.다음과 같이 MovableText를 업데이트하는 코드를 짰더니 제대로 갱신이 이루어지지 않았다...MovableText* m_text;SceneNode* textSceneNode;void CreateText(){ m_text = new MovableText(...); textSceneNode-&amp;gt;attachObject(m_text);}void UpdateText(){ . . textSceneNode-&amp;gt;detachObject(m_text); m_text-&amp;gt;setCaption(...); textSceneNode-&amp;gt;attachObject(m_text); . .}거의 한나절 내내 고생한 끝에 주위의 도움을 받아 수정한 부분.void UpdateText(){ . . m_text = (MovableText*)(textSceneNode-&amp;gt;getgetAttachedObject(0)); // 추가된 부분 textSceneNode-&amp;gt;detachObject(m_text); m_text-&amp;gt;setCaption(...); textSceneNode-&amp;gt;attachObject(m_text); . .}Ogre3D 엔진 내부에서 포인터의 위치를 바꾸거나 자체적으로 사본을 생성하는 걸까? 실제로 디버거를 돌려보면 m_text-&amp;gt;setCaption() 이 수행되기는 하지만 이상한 위치로 가버렸다.가장 가능성이 높은 것은 DLL과 얽힌 문제라는 건데, 지금 코드는 저렇게 써놨지만 실제로는 MovableText 객체는 별도의 DLL에서 생성되고, 그 포인터 정보만 DLL에서 프로그램으로 가져오는 식이다. 이 과정에서 뭔가 메모리 관리 문제로 사본이 생성됐다거나 할 가능성이 있다.정확한 걸 알고는 싶지만, 회사라는게 궁금증을 푸는 데 시간을 원하는 데로 투자할 수 있는 곳이 아니라는 게 안습..ㅠㅜ; 어쨌든 다음번부터는 미리 생성해 둔 포인터를 믿지 말고 그때그때 getXXXX()계열 함수로 객체 정보를 얻어와서 쓰자… ㅠㅜ" }, { "title": "SketchUp SDK에서 메테리얼의 이름 얻기", "url": "/posts/sketchup_sdk_material_name/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2009-04-22 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2024년 현재의 환경과는 맞지 않을 수 있습니다.스케치업 루비스크립트의 Material 클래스에는 name과 display_name 두 개의 메소드가 있다.이 중 name는 메테리얼의 실제 이름, 즉 내부에서 사용되는 이름을 불러오는 것이고 display_name은 스케치업의 UI에 보이는 이름을 가져온다.스케치업에서 ‘Material1’이라는 메테리얼(자동으로 생성되는 이름)이 있을 때, display_name는 보이는 그대로 ‘Material1’을 리턴하지만 name는 ‘*1’을 리턴한다. 내부에서는 저런 식으로 사용되는 듯.문제는, Sketchup 6 C++ SDK에는 display_name에 해당하는 함수가 없다 -_-;;그래서 그냥 Material.GetName()으로 실제 이름을 끌어다 쓰는데, 다행이도 메테리얼명에 *가 들어가도 오거에서 사용하는 데는 별 문제가 없는 듯." }, { "title": "Sketchup 6 SDK에서 색상 구하기", "url": "/posts/sketchup_get_color/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2009-04-22 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.Sketchup 6 SDK에서 메테리얼의 색상값은 ISkpMaterialPtr-&amp;gt;GetColor() 함수로 얻을 수 있다.이 때 리턴값은 OLE_COLOR인데, 이 타입은 DWORD와 같다.4바이트의 DWORD값 안에 RGB값이 들어가는데, 안에 들어가는 색상값의 순서가 일반적으로 생각하는 것처럼 RGBA순이 아니라, NBGR순서이다. (여기서 N은 NULL)그래서 OLE_COLOR에서 RGB를 따로 분리해내기 위해서는 다음과 같이 해야 한다. double red, green, blue; red = (double)((color &amp;lt;&amp;lt; 24) &amp;gt;&amp;gt; 24)/ 255.0; green = (double)((color &amp;lt;&amp;lt; 16) &amp;gt;&amp;gt; 24) / 255.0; blue = (double)((color &amp;lt;&amp;lt; 8) &amp;gt;&amp;gt; 24) / 255.0;" }, { "title": "Transformation.xaxis 함수의 설명 오류(추정)", "url": "/posts/sketchup_sdk_xaxis/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2009-04-15 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2024년 현재의 환경과는 맞지 않을 수 있습니다.Google에서 제공하는 Ruby SketchUp 온라인 메뉴얼의 Transformation 객체에는 xaxis 함수가 있다. http://download.sketchup.com/OnlineDoc/gsu6_ruby/Docs/ruby-transformation.html#xaxis이 함수를 보면 다음과 같이 적혀 있다. Return Valuepoint - a Point3d object containing the xaxis value그런데, 아무래도 이 함수의 리턴값은 Point3d가 아니라 Vector3d인 듯 하다.스케치업에서 Ogre3D 메쉬를 익스포트하는 스크립트 소스를 보면 다음과 같은 코드가 있다...mirrored = face[1].xaxis.cross(face[1].yaxis).dot(face[1].zaxis) &amp;lt; 0..이 소스는 실제로 에러 없이 동작한다. 즉, xaxis의 리턴값을 가지고 cross나 dot를 쓸 수 있다. yaxis나 zaxis도 마찬가지.Ruby는 잘 모르기 때문에 어떻게 돌아가는 건지는 모르겠지만, 매뉴얼이 잘못되었거나 Point3d와 Vector3d가 호환되는 클래스이거나 둘 중 하나일 듯." }, { "title": "[C++/C#] INSERT INTO 문의 구문 오류입니다 ", "url": "/posts/insert_into_error/", "categories": "C++", "tags": "ADO.NET", "date": "2008-12-24 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2010년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.mdb를 ADO.NET로 사용할 때 이 오류 때문에 한시간 반 가까이를 헤맸다.당연히 insert 쿼리문 자체에는 아무 문제도 없고, 문제가 된 쿼리문을 복사해서 Access에서 직접 실행해봐도 정상적으로 작동한다.문제가 된 쿼리문(정확히는 문제가 뭔지 테스트하기 위해 만든 쿼리)는 이렇다.insert into TB_MEMOTEST (MEMO) values (&quot;테스트&quot;)에러의 원인은 구문 자체가 아니라, MEMO가 mdb의 예약어이기 때문이다.그런데 어째서인지 테이블을 설계할 때는 아무 말도 없다. 액세스 내에서 쿼리를 실행할 때도 전혀 에러가 안 난다. ado로, 그것도 select의 경우는 문제 없고 update나 insert를 실행할 때만 ‘구문 오류입니다’라는 에러를 내놓을 뿐이다.내가 mdb를 처음 써본 탓도 있지만, 에러 메세지 좀 제대로 내주면 어디 덧나나? 크리스마스 이브에 야근하는 것도 열받는데…-_-+" }, { "title": "VS 2005/2008에서 png 파일을 icon 클래스에 등록하는 방법", "url": "/posts/png_register_icon/", "categories": "C++", "tags": "C++", "date": "2008-12-05 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.아래처럼 직접 png 파일을 icon 클래스에 등록할 수는 없다. 형식이 맞지 않다고 에러를 냄.icon = new Icon(&quot;test.png&quot;)하지만 ImageList 클래스같은 경우 이미지로 Icon 클래스를 사용하므로, 방법이 필요한데..IntPtr hIcon = new Bitmap(AllData.projectList[i][3]).GetHicon();Icon ico = Icon.FromHandle(hIcon);이렇게 핸들을 받아서 등록하면 된다. 딱히 변환을 거치는 구조도 아닌 것 같은데 왜 이렇게 해야 하는지는 의문. 참고로 IconConverter 클래스는 어떻게 쓰는 건지도 모르겠다.참고: http://social.msdn.microsoft.com/Forums/en-US/vbgeneral/thread/d0ed79b1-99b3-428d-9163-023d556a6a2d/" }, { "title": "C#에서 C++ dll 불러오기/사용하기 관련자료", "url": "/posts/load_dll/", "categories": "C&#35;", "tags": "C&#35;, C++", "date": "2008-12-05 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.C/C++ 구조체와 함수를 C# 에서 사용하기[출처 : http://hado.hadostudio.com/blog/ ]http://blog.naver.com/nongae02?Redirect=Log&amp;amp;logNo=130031348738[출처: http://blog.naver.com/nongae02]http://cafe.naver.com/msrskorea.cafe?iframe_url=/ArticleRead.nhn%3Farticleid=862[출처: http://cafe.naver.com/msrskorea ]http://tjstory.tistory.com/47[출처: http://tjstory.tistory.com/ ]링크는 걸어놨는데, 쓸 일이 있을지 모르겠다 -_-;" }, { "title": "Visual Studio 2008의 Code Assist", "url": "/posts/code_assist_korean/", "categories": "C++", "tags": "Visual Studio", "date": "2008-12-03 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2022년 현재의 환경과는 맞지 않을 수 있습니다.이클립스의 코드 어시스트에는 이전에 찾거나 이동한 곳으로 이동하는 기능이 있다. 단축키는 alt+왼쪽/오른쪽 화살표이다.함수 정의나 참조 등을 확인한 후 원래 위치로 돌아오거나 할 때 매우 유용한 기능이라, 비쥬얼 스튜디오를 쓸 때 상당히 불편했었는데, 단축키 리스트를 뒤져보니 같은 기능이 있었다.(없을 리가 없지..)단축키는 ctrl+-, crtl+shift+-키. View.Navigate-Backward, View.Navigate-Forward 기능인데, 깔린 게 한글 VS 2008이라 뭘로 번역됐는지 못 찾아서 또 한참 헤맸다.결국 찾아낸 한글번역은 보기.앞으로탐색, 보기.뒤로탐색이다 -_-;이것만이라도 이클립스 단축키랑 같은 alt+&amp;lt;&amp;gt;로 바꿔둘까 생각중.X같은 dll와 ocx도 그렇고, 자바/이클립스가 C#/VS보다 훨씬 나아 보이는 구석이 많다. GUI 지원만 빼고." }, { "title": "Ogre3D Sketchup Exporter 소스 분석", "url": "/posts/sketchup_ogre3d_exporter/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2008-11-10 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2024년 현재의 환경과는 맞지 않을 수 있습니다.Sketchup Ogre3D Exporter 분석OGRE Add-On Project의 일부.Ruby Script로 제작. 위키 소개: http://www.ogre3d.org/wiki/index.php/Sketchup_Exporter공식홈 소개: http://www.ogre3d.org/index.php?option=com_content&amp;amp;task=view&amp;amp;id=17&amp;amp;Itemid=70소스는 첨부파일에 포함. 오픈소스이므로 별 문제는 없을 듯.Export(), exportDialog(), grabDialogData(), saveConfig()는 따로 분석할만한 내용은 없다.핵심은 collectMaterials()함수. 여기서 정점, 재질 데이터 전부를 뽑고 writeMaterials(), exportFaces()에서 데이터를 XML 형태로 써넣는다.일단 collectMaterials(matlist, ents, trans, inherited_mat, root)함수 분석. 인자 중 matlist는 메테리얼 리스트이다. 하지만 이 코드에서는 matlist 내에 메테리얼 정보만이 아니라 면(face)과 , 변환(transform) 정보까지 포함시켜서 모든 데이터를 여기서 뽑아낸다. matlist는 배열이며, 배열의 각 요소는 다음과 같은 구조로 이루어진다.[ handle, [ [face,trans,frontface, inherited_mat] ] ]루비를 제대로 공부한 적이 없어서 분석이라기보다는 거의 찍기 수준이지만, 대강 C의 구조체 배열처럼 생각하면 될 듯. 제대로 루비 공부한 사람이 보면 비웃을 것 같다 -_-; 일단 handle와 배열 하나 해서 두 개의 인자를 가지는 구조체(C식으로 설명하자면)의 배열이 된다. 두 번째 인자인 배열은 face,trans,frontface, inherited_mat의 4개 요소를 가지는 구조체의 배열이다. ([]가 두 겹으로 되어 있다는 데 유의해야 할 듯)사실 루비를 제대로 공부한 게 아니라 거의 찍기 수준. ents는 엔터티 리스트. trans는 변환값으로, 초기에는 변환이 없는 행렬이 들어간다. inherited_mat는 계층관계에서 자신의 부모가 가진 메테리얼이다. SDK쪽에서 적어놨듯이 스케치업은 면 단위가 아니라 컴포넌트 단위로 재질을 입힐 수 있고, 이 경우 각 면은 자신이 속한 컴포넌트의 재질 정보를 계승받는다. root는 아직 뭔지 정확히는 모르겠지만, 인스턴스일 경우 false로 처리하고, 내부적으로는 face 데이터를 뽑을지 말지를 결정하는 데 사용된다.다음은 함수 전체 소스.def collectMaterials(matlist, ents, trans, inherited_mat, root) for e in ents # 각각의 엔터티별로 루프를 돈다. case e when Sketchup::Face # 엔터티가 면이라면 if (not root) or OgreConfig.exportRootFaces # root 인자와 설정값에 따라 if OgreConfig.exportFrontFaces # 전면의 정점을 뽑을 것인지 if e.material # 재질 정보가 있는 경우. mat = e.material handle = @@tw.load(e,true) # 위에 설명한 matlist의 구조에서 사용되는 handle값. collectFace() 참조. else if inherited_mat # 상위 구조에서 계승받은 메테리얼이 있을 경우 mat = inherited_mat[0] handle = @@tw.load(inherited_mat[1],true) else # 아무것도 없을 경우 mat = nil handle = 0 end end m = matlist[mat] collectFace(m, e, trans, handle, true, if mat then nil else inherited_mat end) # 이 함수는 나중에 설명 end if OgreConfig.exportBackFaces # 후면의 정보도 전면과 방식은 똑같다. if e.back_material mat = e.back_material handle = @@tw.load(e,false) else if inherited_mat mat = inherited_mat[0] handle = @@tw.load(inherited_mat[1],false) else mat = nil handle = 0 end end m = matlist[mat] collectFace(m, e, trans, handle, false, if mat then nil else inherited_mat end) end end when Sketchup::Group # 그룹일 경우 재귀호출을 통해서 그룹에 속한 각각의 엔터티에 대해 함수를 수행한다. # trans에 현재 그룹의 위치 정보가 더해진다. # 현재 그룹에 메테리얼이 있으면 inherited_mat에 추가한다. 메테리얼, 엔터티, 변환 정보가 포함되는 듯. collectMaterials(matlist, e.entities, trans*e.transformation, if e.material then [e.material,e,e.transformation] else inherited_mat end, root) when Sketchup::ComponentInstance # 인스턴스일 경우 해당 컴포넌트의 원본(definition)에 속한 각각의 엔터티에 대해 함수 재귀호출. 그 외의 것은 그룹의 경우와 같다. collectMaterials(matlist, e.definition.entities, trans*e.transformation, if e.material then [e.material,e,e.transformation] else inherited_mat end, false) end endend 함수 인자. m : 메테리얼 정보. 정확히는 [핸들 – [면, 변환, 전/후면, 상속된 메테리얼]의 배열]의 배열.face : 면(face) 정보trans: 변환 행렬frontface : 전/후면 여부를 나타내는 Boolean값.inherited_mat : 상속된 메테리얼 정보. 정확히는 [메테리얼, 엔터티, 변환 행렬]의 구조체. def collectFace(m, face, trans, handle, frontface, inherited_mat) index = nil # times는 클래스의 값만큼 반복하는 반복자의 일종으로 추정(each처럼) # i에 대해 루프를 돈다고 생각하면 될 듯 (감으로 찍기, 이미 프로그램이 아니다 -_-) (m.size).times {|i| if m[i][0]==handle then index = i end} # index가 nil이 아니라는 것은 인자로 받은 handle에 해당하는 # 메테리얼이 이미 m에 있다는 뜻이므로, 값만 채워넣는다. if index m[index][1].push([face,trans,frontface, inherited_mat]) else # 핸들값이 없을 경우 전체 구조체를 m에 추가한다. m.push([handle,[[face,trans,frontface, inherited_mat]]]) endend개인적으로, 대체 왜 이런 구조를 쓰는지 이해할 수가 없다. 메테리얼 리스트 따로 모으고 face 데이터는 따로 모으면 어디 덧나냐? 왜 이걸 메테리얼 쪽에 다 몰아넣으려고 하는건지, 게다가 엔터티 ID 놔두고 왜 텍스쳐 핸들값을 인덱스로 쓰는데? -_-;아무래도 루비로 익스포터를 만들게 되면 아예 새로 짜야 할 듯." }, { "title": "Sketchup SDK 현재까지 확인된 문제점들", "url": "/posts/sketchup_problems/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2008-11-06 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2024년 현재의 환경과는 맞지 않을 수 있습니다. 스케치업에서 컴포넌트를 생성했을 때, 화면상에 있는 모든 컴포넌트 인스턴스를 삭제해도 컴포넌트 정의는 남아서 파일에 저장된다.즉, 도큐먼트 객체에서 GetComponentDefinitions()로 얻어온 리스트에는 실제 화면에 출력되지 않는 컴포넌트의 정보도 들어가 있는 것이다. 특히 Bryce(스케치업을 맨 처음 실행하면 보이는 사람 그림. 컴포넌트다)는 무슨 짓을 해도 skp 파일에 저장된다. 니가 바퀴벌레냐 -_-; 이 문제를 해결하기 위해서는, GetComponentDefinitions()를 쓰지 않고 전체 컴포넌트 인스턴스를 검색하면서 각각의 Definition에 대한 참조를 검색, 중복이 없도록 리스트를 직접 만드는 방법밖에 없다. 아래 포스팅에서 ReadGeometryMain()의 코드에 있는 AddComponentDefinition(pInstance-&amp;gt;ComponentDefinition); 가 그 역할을 수행한다. 이 함수는 그냥 ID로 중복체크 후 전역 변수로 선언된 리스트에 컴포넌트 정의 객체를 추가하는 역할을 한다. 스케치업에서는 원본이 같은 컴포넌트(즉, 인스턴싱된 컴포넌트. 스케치업에서는 컴포넌트를 복사하면 인스턴스를 생성하는 것이 기본이고, Make Unique 명령으로 독립된 컴포넌트로 만들 수 있다) 에 각각 다른 메테리얼을 입힐 수 있다...…??????그럴 수도 있다고 치자. 그럼 각각의 인스턴스는 자신의 정의와 별도로 각 정점에 대한 텍스쳐 좌표 정보를 가지고 있어야 한다는 건데? 그게 무슨 인스턴스냐? --;;;;텍스쳐 좌표 정보를 뽑아내는 작업은 UVHelper라는 객체가 담당하기 때문에 실제로 어떤 구조로 되어 있는지는 모르겠지만, 졸라 난감하다. 이런 식이 되면, 원본 정보를 두고 각 인스턴스가 원본을 참조하기만 하는 구조는 불가능하다. 그래서 Skp를 다른 3D 확장자로 익스포트하면 인스턴스 구조를 보존하지 않는 건가.. --;맥스의 인스턴스와 비슷할지도 모르지만, 스케치업의 Max 익스포터는 아직 구하질 못해서 이 구조를 그대로 가져갈 수 있는지 모르겠다.어쨌든 회사에서 쓸 DB의 구조에 맞출 수 있을 것 같지도 않고(모델링 툴로 스케치업 하나만 쓰는 게 아니니까), 인스턴스 구조는 포기해야 할지도. 프로젝트의 요구사항을 생각해보면 컴포넌트/그룹의 이름과 계층구조, 인스턴스 구조를 그대로 유지하는 Max 익스포터가 필요한데, 아무래도 그런 건 없을 것 같다… -_-;" }, { "title": "Skp 파일의 구조 읽어들이기", "url": "/posts/sketchup_sdk_struct/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2008-11-06 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2024년 현재의 환경과는 맞지 않을 수 있습니다.Materials Skp 파일 내에서 사용되는 전체 메테리얼의 리스트를 도큐먼트 클래스의 GetMaterials() 함수로 얻을 수 있다. 각각의 메테리얼은 위의 함수로 얻어진 ISkpMaterials객체에서 GetItem()함수로 얻는다.각각의 컴포넌트, 그룹, 이미지, 면(Face)는 자신이 사용하는 메테리얼의 정보를 가지고 있다. 하나의 메테리얼이 여러 곳에서 사용될 수 있으므로, 전체 메테리얼 리스트를 나열한 후 각 객체들은 자신이 사용하는 메테리얼의 ID만을 참고하면 된다. 특히 면의 경우 앞면과 뒷면에 각각 메테리얼을 가질 수 있다.OptionManager 옵션 매니저 클래스는 도큐먼트에서 GetOptionManager() 함수로 얻는다. 얻어진 옵션 매니저 클래스의 GetItem()함수로 OptionProvider 클래스를 얻을 수 있는데, 이 클래스는 각각의 옵션을 나타낸다. 하나의 옵션 내에는 여러 개의 설정값이 들어갈 수 있으며, 각각의 설정값은 역시 OptionProvider의 GetItem()함수로 얻는다.옵션에는 스케치업에서 지원하는 안개(fog)나 그림자, 랜더링 옵션, 각종 단위 같은 잡다한 설정값들이 들어간다.Layers 도큐먼트 클래스의 GetLayers() 함수로 전체 레이어 리스트를 얻어올 수 있다. 얻어진 레이어 리스트에서는 GetItem()으로 각각의 레이어를 얻는다.컴포넌트, 그룹, 이미지, 면, 외각선(Edge)등 모든 객체는 자신이 속한 레이어의 정보를 가지고 있다. 전체 레이어를 나열한 후, 각각의 객체가 속한 레이어를 ID로 참조하는 것이 좋다.대부분의 객체는 자신이 속한 레이어의 정보를 직접 가져올 수 없으며, ISkpDrawingElement 클래스로 변환해야만 GetLayer()함수를 쓸 수 있다. ISkpDrawingElement는 거의 모든 객체와 연결되는 인터페이스이다.ComponentDefinitions 스케치업에는 객체들을 묶을 수 있는 방법으로 컴포넌트와 그룹 두 가지를 지원하는데, 둘의 가장 큰 특징은 인스턴싱(Instancing)이다. 이 클래스는 인스턴스가 아닌 컴포넌트의 원본 데이터를 저장한다. Skp 파일 내에서 사용되는 모든 컴포넌트 정의의 리스트는 도큐먼트 클래스의 GetComponentDefinitions()함수로 얻을 수 있다. 모든 컴포넌트 정의를 나열하고, 컴포넌트 인스턴스가 정의를 참조하도록 하면 처리속도와 공간을 절약할 수 있다.단, 도큐먼트에서 컴포넌트 정의 리스트를 직접 불러오는 것은 비추. 이유는 다음에 설명하겠다.ComponentInstance 컴포넌트 인스턴스는 컴포넌트 정의(ComponentDefinition 객체)를 인스턴싱한 객체이다. 내부적으로 변환(Transform) 정보와 자신의 컴포넌트 정의 객체에 대한 참조를 가지고 있다.컴포넌트 인스턴스를 추출하는 방법은 Group와 같이 설명해야 한다.참고로 스케치업에서는 컴포넌트 인스턴스와 정의 각각에 이름을 줄 수 있다.Group Document, Group, ComponentDefinition, Image 객체는 모두 ISkpEntityProvider 인터페이스에서 참조할 수 있다. 그리고 그룹이나 컴포넌트는 다중으로 묶일 수 있으므로, 전체 그룹이나 인스턴스의 목록을 얻기 위해서는 도큐먼트로부터 재귀적으로 검색해야 한다.예를 들어 오브젝트가 컴포넌트로 묶인 후 그룹으로 묶이고, 그 그룹이 또 컴포넌트로 묶여 있다면 오브젝트를 호출하기 위해서는 도큐먼트-&amp;gt;컴포넌트-&amp;gt;그룹-&amp;gt;컴포넌트-&amp;gt;오브젝트 순으로 호출해야 한다.재귀호출을 이용해서 계층구조를 포함한 그룹/컴포넌트의 전체 리스트 및 구조를 뽑아내는 방법은 다음과 같다.void ReadGeometryMain(ISkpEntityProviderPtr pEntProvider, FILE* fp){ HRESULT hr; long nElements; //Recurse all the instances ISkpComponentInstancesPtr pInstances = NULL; hr = pEntProvider-&amp;gt;get_ComponentInstances(&amp;amp;pInstances); hr = pInstances-&amp;gt;get_Count(&amp;amp;nElements); for(long i=0; i&amp;lt;nElements; i++) { ISkpComponentInstancePtr pInstance = pInstances-&amp;gt;Item[i]; AddComponentDefinition(pInstance-&amp;gt;ComponentDefinition); BSTR name = pInstance-&amp;gt;GetName(); fprintf(fp, &quot;&amp;lt;ComponentInstance id=%ld name=%s defId=%ld&amp;gt;\\n&quot;, GetID(pInstance), (char*)_bstr_t(name, true), GetID(pInstance-&amp;gt;GetComponentDefinition())); ReadTransform(pInstance-&amp;gt;Transform, fp); fprintf(fp, &quot;&amp;lt;/ComponentInstance&amp;gt;\\n&quot;); } //Recurse all the groups ISkpGroupsPtr pGroups = NULL; hr = pEntProvider-&amp;gt;get_Groups(&amp;amp;pGroups); hr = pGroups-&amp;gt;get_Count(&amp;amp;nElements); for(long i=0; i&amp;lt;nElements; i++) { ISkpGroupPtr pGroup = pGroups-&amp;gt;Item[i]; ISkpEntityPtr IEnt = pGroup; long entityId = IEnt-&amp;gt;Id; BSTR name; pGroup-&amp;gt;get_Name(&amp;amp;name); fprintf(fp, &quot;&amp;lt;Group id=%ld name=%s&amp;gt;\\n&quot;, entityId, (char*)_bstr_t(name, true)); ReadTransform(pGroup-&amp;gt;Transform, fp); ReadGeometryMain(pGroup, fp); fprintf(fp, &quot;&amp;lt;/Group&amp;gt;\\n&quot;); } //Recurse all the images ISkpImagesPtr pImages = NULL; hr = pEntProvider-&amp;gt;get_Images(&amp;amp;pImages); hr = pImages-&amp;gt;get_Count(&amp;amp;nElements); for(long i=0; i&amp;lt;nElements; i++) { ISkpImagePtr pImage = pImages-&amp;gt;Item[i]; ISkpEntityPtr IEnt = pImage; long entityId = IEnt-&amp;gt;Id; BSTR name; pImage-&amp;gt;get_Name(&amp;amp;name); fprintf(fp, &quot;&amp;lt;Image id=%ld name=%s&amp;gt;\\n&quot;, entityId, (char*)_bstr_t(name, true)); ReadTransform(pImage-&amp;gt;Transform, fp); ReadGeometryMain(pImage, fp); fprintf(fp, &quot;&amp;lt;/Image&amp;gt;\\n&quot;); } //Write all the faces ISkpFacesPtr pFaces = NULL; hr = pEntProvider-&amp;gt;get_Faces(&amp;amp;pFaces); hr = pFaces-&amp;gt;get_Count(&amp;amp;nElements); if(nElements &amp;gt; 0) { fprintf(fp, &quot;&amp;lt;Faces count=%ld&amp;gt;\\n&quot;, nElements); for(long i=0; i&amp;lt;nElements; i++) { ISkpFacePtr pFace; hr = pFaces-&amp;gt;get_Item(i, &amp;amp;pFace); if (hr==S_OK) ReadFace(pFace, fp); } fprintf(fp, &quot;&amp;lt;/Faces&amp;gt;\\n&quot;); } //Write all the edges ISkpEdgesPtr pEdges = NULL; hr = pEntProvider-&amp;gt;get_Edges(&amp;amp;pEdges); hr = pEdges-&amp;gt;get_Count(&amp;amp;nElements); if(nElements &amp;gt; 0) { fprintf(fp, &quot;&amp;lt;Edges count=%ld&amp;gt;\\n&quot;, nElements); for(long i=0; i&amp;lt;nElements; i++) { ISkpEdgePtr pEdge; hr = pEdges-&amp;gt;get_Item(i, &amp;amp;pEdge); if (hr==S_OK) ReadEdge(pEdge, fp); } fprintf(fp, &quot;&amp;lt;/Edges&amp;gt;\\n&quot;); }} ISkpEntityProvider가 그룹, 컴포넌트, 이미지 전부를 참조할 수 있음에 유의.이 함수는 Face나 Edge가 나올 때까지 재귀호출을 반복하면서 계층구조를 표시한다. 단 컴포넌트 인스턴스는 정의를 참조할 뿐이므로 재귀호출하지 않는다.Image 이미지 객체라고 하는데, 사실 왜 그룹/컴포넌트와 같이 계층구조를 이루는 건지 모르겠다. 벡터 이미지라면 선이나 면의 집합일 수도 있는데, API 레퍼런스에 당당하게 ‘An Image object represents a raster image placed in the Model’이라고 쓰여 있으니 그런 것 같지도 않고…일단 위의 ReadGeometryMain() 함수는 샘플 코드를 참조한 거라 그쪽에 있는 그대로 썼다.Transform 변환 행렬. 4x4 행렬이다. 인스턴스나 그룹, 이미지 클래스에서 GetTransForm() 함수로 얻을 수 있다.skp 파일을 읽어들이는 방법은 대강.. SketchUp::ISkpApplicationPtr pApp = CSkpModelFactory::GetSkpApplication();if(pApp == NULL) return -1;SketchUp::ISkpFileReaderPtr pFileReader = pApp;SketchUp::ISkpDocumentPtr pDoc = pFileReader-&amp;gt;OpenFile(&quot;test.skp&quot;); 이 다음에 메테리얼, 레이어, 옵션의 리스트를 읽은 후 컴포넌트/객체 정보를 검색해서 뽑아내면 된다.Face, Edge, Mesh는…나도 샘플 코드 그대로 가져다 쓴 것 뿐이라 딱히 정리할만한 지식이 없음.스케치업에 있는 데이터가 이것뿐일 리는 없지만, 일단은 이 정도." }, { "title": "Sketchup SDK 첫 사용기(?)", "url": "/posts/sketchup_sdk_first_use/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2008-11-05 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2024년 현재의 환경과는 맞지 않을 수 있습니다.회사에서 스케치업 데이터를 변환하는 API 분석 업무를 맡았다. 팔아먹는 솔루션의 특성상 캐드에서 스케치업까지 온갖 종류의 데이터를 다 다루는데, 그동안 Sketch-up은 전혀 안 쓰다가 관련업체 중에 쓰는 곳이 늘어나다보니 손을 대게 된 것.스케치업 API는 C/C++로 된 SDK의 API와 RubyScript API 두 종류가 있다. 일반적으로 스케치업의 플러그인을 만들 때는 루비스크립트를 쓰고, C++ SDK를 다루는 경우는 드물다. (구글까지 뒤져봐도 거의 없다)하지만 회사에서 필요하다니 어쨌든 받아서 써봤는데.....…뭥미?당당하게 SDK Beta 버전이라고 되어 있다.받아보니 SDK를 사용한 예제가 3개 들어가 있다. 하나는 정체불명의 Reader, 하나는 역시 정체불명의 Skp 파일 생성 예제, 나머지 하나는 그나마 정체는 대강 추정되는 Skp-&amp;gt;XML 변환 프로그램이다.문제는, 이 셋이 전부 별도의 라이브러리를 쓴다.SDK라고 하면 보통 통일된 API 함수와 라이브러리가 있고, 그걸 이용한 예제 코드가 있어야 하는데, 이건 베타 버전이라고 통일된 라이브러리가 없다.3개의 예제 각각이 자기 전용의 라이브러리를 가지고 있고, 사용법이나 함수명, 기능이 다 미묘하게 다르다. 하나는 API를 한 덩어리로 모아서 구현해둔 소스 파일(.c) 하나를 프로젝트에 바로 첨부해서 쓰고, 하나는 인터페이스/함수별로 나뉘어진 소스 파일 다수를 불러다 쓴다.마지막 하나는 dll을 끌어다 쓰는데, 이 dll은 이 예제 프로그램에서만 사용한다.더 중요한 것은, API 도큐먼트와 라이브러리의 함수들도 약간씩 안 맞다. 아무리 베타 버전이라지만 이건 좀 매너…-_-;아, 더 중요한 게 있다.그나마 뭔지 대충 알아먹을만 하고 코드도 제대로 구현되어 있는 Skp-&amp;gt;XML 익스포터 예제(DLL이며, 스케치업 설치 폴더 아래 /Exporter에 복사하면 자동으로 스케치업 익스포트 메뉴에 등록된다)는, 스케치업 6.0 Pro서 테스트해보면 에러를 내면서 다운되어버린다.님들 정말 이래도 되는 거심? 설마 VS 2005로 만들어진 소스를 2008에서 컴파일했다고 이러는 건 아니겠지?결국 한나절 내내 고민한 끝에 dll을 가져와서 쓰는 쪽으로 낙찰. 문제는 이게 QueryInterface()를 제대로 지원하지 않는다는 건데, 뭐 같은 API 내에서 쓰는 거니 버전 충돌 문제는 없을 듯." }, { "title": "SkpApplication()의 생성", "url": "/posts/sketchup_sdk_create/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2008-11-05 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2024년 현재의 환경과는 맞지 않을 수 있습니다.스케치업 익스포터 dll을 만드는 경우야 형식(아마도 DoExport()함수인 듯)만 맞춰주면 skp 파일을 읽어들이거나 하는 일은 스케치업 자체에서 해 주겠지만, 다른 응용 프로그램에서 스케치업 파일을 읽거나 생성하려면 먼저 파일을 불러오고 skp 파일 객체를 생성하는 것이 첫번째이다.스케치업 파일을 읽고 객체를 생성하는 데 관련된 클래스는 다음과 같다. ISkpAppliaction : skp 어플리케이션 객체. 도큐먼트 객체를 호출할 수 있다.ISkpDocument : 실제 파일 내의 데이터를 담고 있는 객체.ISkpFileReader : skp 파일을 읽어서 도큐먼트 객체를 생성하는 리더 클래스.ISkpAppliaction와 ISkpFileReader는 API 도큐먼트에는 나와 있지 않지만(..) 같은 클래스의 인터페이스로 추정된다. 즉, 어플리케이션 객체를 생성하면 파일을 읽을 수 있는 셈인데..API 도큐먼트 어디에도 이 객체를 직접 생성하는 방법에 대한 설명이 없다 -_-;;;;exporter dll을 만들 때는 객체를 직접 생성할 필요가 없긴 한데, 분명히 이 SDK는 외부 어플리케이션에서 skp 파일을 읽어들이거나 생성할 때 쓰는 거라고 SDK 소개에 적혀 있다. 대체 어쩌라는겨? (뭐, 내가 능력이 부족해서 못 찾아냈을수도 있지만)현재까지 알아낸 SkpApplication 객체 생성 방법은 두 가지다. SDK 예제 중 하나에 들어 있는 SkpWriter.dll을 호출해서 그 안에 있는 GetSkpApplication() 함수를 쓰는 방법이다. SDK 예제 중 하나에 들어 있는 SketchUpReader.dll을 호출해서 그 안에 있는 GetSketchUpSkpApplication() 함수를 쓰는 방법이다.… 저 둘, 차이가 뭐야?둘 다 예제 소스만 있고(게다가 주석도 없다. 너희들 구글에서 만든 거 맞니?) 다른 설명이 없어서 저 둘 사이에 무슨 차이가 있는지 알 방법이 없다.결국 고민 끝에 SketchUpReader.dll을 쓰기로 결정.어찌어찌 컨버터는 돌아가고 있지만, 정말 괜찮은 걸까…?" }, { "title": "Sketchup SDK Interface class들의 사용", "url": "/posts/sketchup_sdk_class/", "categories": "Sketchup SDK", "tags": "Sketchup SDK", "date": "2008-11-05 00:00:00 +0900", "snippet": "* 이전 블로그 백업글 : 이 게시물은 2008~2013년 사이에 작성된 것으로, 2024년 현재의 환경과는 맞지 않을 수 있습니다.Managed C++은 거의 다뤄 본 적도 없고, Turbo C 2.0 시절에 C를 배웠다가 회사에 와서는 5개월간 자바만 두드린 탓에 C++ 코드 분석하기가 상당히 골때였는데..특히 이놈의 QueryInferface()는 뭐하는 물건인지 몰라서 한참 헤맸다. http://blog.naver.com/ratmsma?Redirect=Log&amp;amp;logNo=40025129098대강 서로 다른 버전의 COM 인터페이스들을 연동하는 역할이라고 하는데, COM을 공부한 적이 있어야지.. -_-; 대충 뒤져보니 사용법은 이런 식이다.00005 ISkpApplicationBridge* pAppProvider = NULL;0000600007 hr = pApp-&amp;gt;QueryInterface(IID_ISkpApplicationBridge, (void**)&amp;amp;pAppProvider);0000800009 if(FAILED(hr)) return hr;0001000011 hr = pAppProvider-&amp;gt;GetSkpApplication(ppSkpApp);스케치업 SDK의 인터페이스들은 서로 같은 클래스를 상속받는 것들이 있다.예를 들면,위의 인터페이스 4개는 모두 SkpFace 클래스를 상속받으므로 각 인터페이스들간에 QueryInterface()함수로 전환이 가능한 것.하지만, 직접 해보니 같은 버전 내에서는 굳이 저런 함수를 쓸 필요도 없이, 바로 대입이 가능했음.예를 들어 ISkpFacePtr pFace = ...; iSkpEntityPtr pEnt = pFace; 이런 식으로 직접 대입이 가능.참고로 …Ptr 시리즈는 API 도큐먼트에는 없고, 내가 사용중인 dll에만 스마트포인터로 typedef되어 있다.일단 돌아가긴 돌아가지만, 이쪽 지식은 거의 깡통이라 제대로 이해하고 있는 건지… ㅁㄴㅇㄹ" } ]
